Help on package pkg_resources:

NAME
    pkg_resources

DESCRIPTION
    Package resource API
    --------------------
    
    A resource is a logical file contained within a package, or a logical
    subdirectory thereof.  The package resource API expects resource names
    to have their path parts separated with ``/``, *not* whatever the local
    path separator is.  Do not use os.path operations to manipulate resource
    names being passed into the API.
    
    The package resource API is designed to work with normal filesystem packages,
    .egg files, and unpacked .egg files.  It can also work in a limited way with
    .zip files and with custom PEP 302 loaders that support the ``get_data()``
    method.

PACKAGE CONTENTS
    _vendor (package)
    extern (package)
    py31compat

SUBMODULES
    appdirs
    packaging
    six
    urllib

CLASSES
    builtins.Exception(builtins.BaseException)
        ResolutionError
            DistributionNotFound
            UnknownExtra
            VersionConflict
    builtins.RuntimeError(builtins.Exception)
        ExtractionError
    builtins.RuntimeWarning(builtins.Warning)
        PEP440Warning
    builtins.Warning(builtins.Exception)
        PkgResourcesDeprecationWarning
    builtins.object
        builtins.type
        Distribution
        EntryPoint
        Environment
        IMetadataProvider
            IResourceProvider
        NullProvider
            EggProvider
                DefaultProvider
                    PathMetadata
                ZipProvider
                    EggMetadata
            EmptyProvider
                FileMetadata
        ResourceManager
        WorkingSet
    pkg_resources.extern.packaging.requirements.Requirement(builtins.object)
        Requirement
    
    AvailableDistributions = class Environment(builtins.object)
     |  AvailableDistributions(search_path=None, platform='win-amd64', python='3.7')
     |  
     |  Searchable snapshot of distributions on a search path
     |  
     |  Methods defined here:
     |  
     |  __add__(self, other)
     |      Add an environment or distribution to an environment
     |  
     |  __getitem__(self, project_name)
     |      Return a newest-to-oldest list of distributions for `project_name`
     |      
     |      Uses case-insensitive `project_name` comparison, assuming all the
     |      project's distributions use their project's name converted to all
     |      lowercase as their key.
     |  
     |  __iadd__(self, other)
     |      In-place addition of a distribution or environment
     |  
     |  __init__(self, search_path=None, platform='win-amd64', python='3.7')
     |      Snapshot distributions available on a search path
     |      
     |      Any distributions found on `search_path` are added to the environment.
     |      `search_path` should be a sequence of ``sys.path`` items.  If not
     |      supplied, ``sys.path`` is used.
     |      
     |      `platform` is an optional string specifying the name of the platform
     |      that platform-specific distributions must be compatible with.  If
     |      unspecified, it defaults to the current platform.  `python` is an
     |      optional string naming the desired version of Python (e.g. ``'3.6'``);
     |      it defaults to the current version.
     |      
     |      You may explicitly set `platform` (and/or `python`) to ``None`` if you
     |      wish to map *all* distributions, not just those compatible with the
     |      running platform or Python version.
     |  
     |  __iter__(self)
     |      Yield the unique project names of the available distributions
     |  
     |  add(self, dist)
     |      Add `dist` if we ``can_add()`` it and it has not already been added
     |  
     |  best_match(self, req, working_set, installer=None, replace_conflicting=False)
     |      Find distribution best matching `req` and usable on `working_set`
     |      
     |      This calls the ``find(req)`` method of the `working_set` to see if a
     |      suitable distribution is already active.  (This may raise
     |      ``VersionConflict`` if an unsuitable version of the project is already
     |      active in the specified `working_set`.)  If a suitable distribution
     |      isn't active, this method returns the newest distribution in the
     |      environment that meets the ``Requirement`` in `req`.  If no suitable
     |      distribution is found, and `installer` is supplied, then the result of
     |      calling the environment's ``obtain(req, installer)`` method will be
     |      returned.
     |  
     |  can_add(self, dist)
     |      Is distribution `dist` acceptable for this environment?
     |      
     |      The distribution must match the platform and python version
     |      requirements specified when this environment was created, or False
     |      is returned.
     |  
     |  obtain(self, requirement, installer=None)
     |      Obtain a distribution matching `requirement` (e.g. via download)
     |      
     |      Obtain a distro that matches requirement (e.g. via download).  In the
     |      base ``Environment`` class, this routine just returns
     |      ``installer(requirement)``, unless `installer` is None, in which case
     |      None is returned instead.  This method is a hook that allows subclasses
     |      to attempt other ways of obtaining a distribution before falling back
     |      to the `installer` argument.
     |  
     |  remove(self, dist)
     |      Remove `dist` from the environment
     |  
     |  scan(self, search_path=None)
     |      Scan `search_path` for distributions usable in this environment
     |      
     |      Any distributions found are added to the environment.
     |      `search_path` should be a sequence of ``sys.path`` items.  If not
     |      supplied, ``sys.path`` is used.  Only distributions conforming to
     |      the platform/python version defined at initialization are added.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class DefaultProvider(EggProvider)
     |  DefaultProvider(module)
     |  
     |  Provides access to package resources in the filesystem
     |  
     |  Method resolution order:
     |      DefaultProvider
     |      EggProvider
     |      NullProvider
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  get_resource_stream(self, manager, resource_name)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from EggProvider:
     |  
     |  __init__(self, module)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NullProvider:
     |  
     |  get_metadata(self, name)
     |  
     |  get_metadata_lines(self, name)
     |  
     |  get_resource_filename(self, manager, resource_name)
     |  
     |  get_resource_string(self, manager, resource_name)
     |  
     |  has_metadata(self, name)
     |  
     |  has_resource(self, resource_name)
     |  
     |  metadata_isdir(self, name)
     |  
     |  metadata_listdir(self, name)
     |  
     |  resource_isdir(self, resource_name)
     |  
     |  resource_listdir(self, resource_name)
     |  
     |  run_script(self, script_name, namespace)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NullProvider:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NullProvider:
     |  
     |  egg_info = None
     |  
     |  egg_name = None
     |  
     |  loader = None
    
    class Distribution(builtins.object)
     |  Distribution(location=None, metadata=None, project_name=None, version=None, py_version='3.7', platform=None, precedence=3)
     |  
     |  Wrap an actual or potential sys.path entry w/metadata
     |  
     |  Methods defined here:
     |  
     |  __dir__(self)
     |      Default dir() implementation.
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __ge__(self, other)
     |      Return self>=value.
     |  
     |  __getattr__(self, attr)
     |      Delegate all unrecognized public attributes to .metadata provider
     |  
     |  __gt__(self, other)
     |      Return self>value.
     |  
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __init__(self, location=None, metadata=None, project_name=None, version=None, py_version='3.7', platform=None, precedence=3)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __le__(self, other)
     |      Return self<=value.
     |  
     |  __lt__(self, other)
     |      Return self<value.
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  activate(self, path=None, replace=False)
     |      Ensure distribution is importable on `path` (default=sys.path)
     |  
     |  as_requirement(self)
     |      Return a ``Requirement`` that matches this distribution exactly
     |  
     |  check_version_conflict(self)
     |  
     |  clone(self, **kw)
     |      Copy this distribution, substituting in any changed keyword args
     |  
     |  egg_name(self)
     |      Return what this distribution's standard .egg filename should be
     |  
     |  get_entry_info(self, group, name)
     |      Return the EntryPoint object for `group`+`name`, or ``None``
     |  
     |  get_entry_map(self, group=None)
     |      Return the entry point map for `group`, or the full entry map
     |  
     |  has_version(self)
     |  
     |  insert_on(self, path, loc=None, replace=False)
     |      Ensure self.location is on path
     |      
     |      If replace=False (default):
     |          - If location is already in path anywhere, do nothing.
     |          - Else:
     |            - If it's an egg and its parent directory is on path,
     |              insert just ahead of the parent.
     |            - Else: add to the end of path.
     |      If replace=True:
     |          - If location is already on path anywhere (not eggs)
     |            or higher priority than its parent (eggs)
     |            do nothing.
     |          - Else:
     |            - If it's an egg and its parent directory is on path,
     |              insert just ahead of the parent,
     |              removing any lower-priority entries.
     |            - Else: add it to the front of path.
     |  
     |  load_entry_point(self, group, name)
     |      Return the `name` entry point of `group` or raise ImportError
     |  
     |  requires(self, extras=())
     |      List of Requirements needed for this distro if `extras` are used
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  from_filename(filename, metadata=None, **kw) from builtins.type
     |  
     |  from_location(location, basename, metadata=None, **kw) from builtins.type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  extras
     |  
     |  hashcmp
     |  
     |  key
     |  
     |  parsed_version
     |  
     |  version
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  PKG_INFO = 'PKG-INFO'
    
    class DistributionNotFound(ResolutionError)
     |  A requested distribution was not found
     |  
     |  Method resolution order:
     |      DistributionNotFound
     |      ResolutionError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  report(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  req
     |  
     |  requirers
     |  
     |  requirers_str
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ResolutionError:
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ResolutionError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class EggMetadata(ZipProvider)
     |  EggMetadata(importer)
     |  
     |  Metadata provider for .egg files
     |  
     |  Method resolution order:
     |      EggMetadata
     |      ZipProvider
     |      EggProvider
     |      NullProvider
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, importer)
     |      Create a metadata provider from a zipimporter
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ZipProvider:
     |  
     |  get_resource_filename(self, manager, resource_name)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ZipProvider:
     |  
     |  zipinfo
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ZipProvider:
     |  
     |  eagers = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NullProvider:
     |  
     |  get_metadata(self, name)
     |  
     |  get_metadata_lines(self, name)
     |  
     |  get_resource_stream(self, manager, resource_name)
     |  
     |  get_resource_string(self, manager, resource_name)
     |  
     |  has_metadata(self, name)
     |  
     |  has_resource(self, resource_name)
     |  
     |  metadata_isdir(self, name)
     |  
     |  metadata_listdir(self, name)
     |  
     |  resource_isdir(self, resource_name)
     |  
     |  resource_listdir(self, resource_name)
     |  
     |  run_script(self, script_name, namespace)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NullProvider:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NullProvider:
     |  
     |  egg_info = None
     |  
     |  egg_name = None
     |  
     |  loader = None
    
    class EggProvider(NullProvider)
     |  EggProvider(module)
     |  
     |  Provider based on a virtual filesystem
     |  
     |  Method resolution order:
     |      EggProvider
     |      NullProvider
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, module)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NullProvider:
     |  
     |  get_metadata(self, name)
     |  
     |  get_metadata_lines(self, name)
     |  
     |  get_resource_filename(self, manager, resource_name)
     |  
     |  get_resource_stream(self, manager, resource_name)
     |  
     |  get_resource_string(self, manager, resource_name)
     |  
     |  has_metadata(self, name)
     |  
     |  has_resource(self, resource_name)
     |  
     |  metadata_isdir(self, name)
     |  
     |  metadata_listdir(self, name)
     |  
     |  resource_isdir(self, resource_name)
     |  
     |  resource_listdir(self, resource_name)
     |  
     |  run_script(self, script_name, namespace)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NullProvider:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NullProvider:
     |  
     |  egg_info = None
     |  
     |  egg_name = None
     |  
     |  loader = None
    
    class EmptyProvider(NullProvider)
     |  Provider that returns nothing for all requests
     |  
     |  Method resolution order:
     |      EmptyProvider
     |      NullProvider
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  module_path = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NullProvider:
     |  
     |  get_metadata(self, name)
     |  
     |  get_metadata_lines(self, name)
     |  
     |  get_resource_filename(self, manager, resource_name)
     |  
     |  get_resource_stream(self, manager, resource_name)
     |  
     |  get_resource_string(self, manager, resource_name)
     |  
     |  has_metadata(self, name)
     |  
     |  has_resource(self, resource_name)
     |  
     |  metadata_isdir(self, name)
     |  
     |  metadata_listdir(self, name)
     |  
     |  resource_isdir(self, resource_name)
     |  
     |  resource_listdir(self, resource_name)
     |  
     |  run_script(self, script_name, namespace)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NullProvider:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NullProvider:
     |  
     |  egg_info = None
     |  
     |  egg_name = None
     |  
     |  loader = None
    
    class EntryPoint(builtins.object)
     |  EntryPoint(name, module_name, attrs=(), extras=(), dist=None)
     |  
     |  Object representing an advertised importable object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name, module_name, attrs=(), extras=(), dist=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  load(self, require=True, *args, **kwargs)
     |      Require packages for this EntryPoint, then resolve it.
     |  
     |  require(self, env=None, installer=None)
     |  
     |  resolve(self)
     |      Resolve the entry point from its module and attrs.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  parse(src, dist=None) from builtins.type
     |      Parse a single entry point from string `src`
     |      
     |      Entry point syntax follows the form::
     |      
     |          name = some.module:some.attr [extra1, extra2]
     |      
     |      The entry name and module name are required, but the ``:attrs`` and
     |      ``[extras]`` parts are optional
     |  
     |  parse_group(group, lines, dist=None) from builtins.type
     |      Parse an entry point group
     |  
     |  parse_map(data, dist=None) from builtins.type
     |      Parse a map of entry point groups
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  pattern = re.compile('\\s*(?P<name>.+?)\\s*=\\s*(?P<module...P<attr>[\...
    
    class Environment(builtins.object)
     |  Environment(search_path=None, platform='win-amd64', python='3.7')
     |  
     |  Searchable snapshot of distributions on a search path
     |  
     |  Methods defined here:
     |  
     |  __add__(self, other)
     |      Add an environment or distribution to an environment
     |  
     |  __getitem__(self, project_name)
     |      Return a newest-to-oldest list of distributions for `project_name`
     |      
     |      Uses case-insensitive `project_name` comparison, assuming all the
     |      project's distributions use their project's name converted to all
     |      lowercase as their key.
     |  
     |  __iadd__(self, other)
     |      In-place addition of a distribution or environment
     |  
     |  __init__(self, search_path=None, platform='win-amd64', python='3.7')
     |      Snapshot distributions available on a search path
     |      
     |      Any distributions found on `search_path` are added to the environment.
     |      `search_path` should be a sequence of ``sys.path`` items.  If not
     |      supplied, ``sys.path`` is used.
     |      
     |      `platform` is an optional string specifying the name of the platform
     |      that platform-specific distributions must be compatible with.  If
     |      unspecified, it defaults to the current platform.  `python` is an
     |      optional string naming the desired version of Python (e.g. ``'3.6'``);
     |      it defaults to the current version.
     |      
     |      You may explicitly set `platform` (and/or `python`) to ``None`` if you
     |      wish to map *all* distributions, not just those compatible with the
     |      running platform or Python version.
     |  
     |  __iter__(self)
     |      Yield the unique project names of the available distributions
     |  
     |  add(self, dist)
     |      Add `dist` if we ``can_add()`` it and it has not already been added
     |  
     |  best_match(self, req, working_set, installer=None, replace_conflicting=False)
     |      Find distribution best matching `req` and usable on `working_set`
     |      
     |      This calls the ``find(req)`` method of the `working_set` to see if a
     |      suitable distribution is already active.  (This may raise
     |      ``VersionConflict`` if an unsuitable version of the project is already
     |      active in the specified `working_set`.)  If a suitable distribution
     |      isn't active, this method returns the newest distribution in the
     |      environment that meets the ``Requirement`` in `req`.  If no suitable
     |      distribution is found, and `installer` is supplied, then the result of
     |      calling the environment's ``obtain(req, installer)`` method will be
     |      returned.
     |  
     |  can_add(self, dist)
     |      Is distribution `dist` acceptable for this environment?
     |      
     |      The distribution must match the platform and python version
     |      requirements specified when this environment was created, or False
     |      is returned.
     |  
     |  obtain(self, requirement, installer=None)
     |      Obtain a distribution matching `requirement` (e.g. via download)
     |      
     |      Obtain a distro that matches requirement (e.g. via download).  In the
     |      base ``Environment`` class, this routine just returns
     |      ``installer(requirement)``, unless `installer` is None, in which case
     |      None is returned instead.  This method is a hook that allows subclasses
     |      to attempt other ways of obtaining a distribution before falling back
     |      to the `installer` argument.
     |  
     |  remove(self, dist)
     |      Remove `dist` from the environment
     |  
     |  scan(self, search_path=None)
     |      Scan `search_path` for distributions usable in this environment
     |      
     |      Any distributions found are added to the environment.
     |      `search_path` should be a sequence of ``sys.path`` items.  If not
     |      supplied, ``sys.path`` is used.  Only distributions conforming to
     |      the platform/python version defined at initialization are added.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ExtractionError(builtins.RuntimeError)
     |  An error occurred extracting a resource
     |  
     |  The following attributes are available from instances of this exception:
     |  
     |  manager
     |      The resource manager that raised this exception
     |  
     |  cache_path
     |      The base directory for resource extraction
     |  
     |  original_error
     |      The exception instance that caused extraction to fail
     |  
     |  Method resolution order:
     |      ExtractionError
     |      builtins.RuntimeError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.RuntimeError:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.RuntimeError:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class FileMetadata(EmptyProvider)
     |  FileMetadata(path)
     |  
     |  Metadata handler for standalone PKG-INFO files
     |  
     |  Usage::
     |  
     |      metadata = FileMetadata("/path/to/PKG-INFO")
     |  
     |  This provider rejects all data and metadata requests except for PKG-INFO,
     |  which is treated as existing, and will be the contents of the file at
     |  the provided location.
     |  
     |  Method resolution order:
     |      FileMetadata
     |      EmptyProvider
     |      NullProvider
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, path)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_metadata(self, name)
     |  
     |  get_metadata_lines(self, name)
     |  
     |  has_metadata(self, name)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from EmptyProvider:
     |  
     |  module_path = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NullProvider:
     |  
     |  get_resource_filename(self, manager, resource_name)
     |  
     |  get_resource_stream(self, manager, resource_name)
     |  
     |  get_resource_string(self, manager, resource_name)
     |  
     |  has_resource(self, resource_name)
     |  
     |  metadata_isdir(self, name)
     |  
     |  metadata_listdir(self, name)
     |  
     |  resource_isdir(self, resource_name)
     |  
     |  resource_listdir(self, resource_name)
     |  
     |  run_script(self, script_name, namespace)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NullProvider:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NullProvider:
     |  
     |  egg_info = None
     |  
     |  egg_name = None
     |  
     |  loader = None
    
    class IMetadataProvider(builtins.object)
     |  Methods defined here:
     |  
     |  get_metadata(name)
     |      The named metadata resource as a string
     |  
     |  get_metadata_lines(name)
     |      Yield named metadata resource as list of non-blank non-comment lines
     |      
     |      Leading and trailing whitespace is stripped from each line, and lines
     |      with ``#`` as the first non-blank character are omitted.
     |  
     |  has_metadata(name)
     |      Does the package's distribution contain the named metadata?
     |  
     |  metadata_isdir(name)
     |      Is the named metadata a directory?  (like ``os.path.isdir()``)
     |  
     |  metadata_listdir(name)
     |      List of metadata names in the directory (like ``os.listdir()``)
     |  
     |  run_script(script_name, namespace)
     |      Execute the named script in the supplied namespace dictionary
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class IResourceProvider(IMetadataProvider)
     |  An object that provides access to package resources
     |  
     |  Method resolution order:
     |      IResourceProvider
     |      IMetadataProvider
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  get_resource_filename(manager, resource_name)
     |      Return a true filesystem path for `resource_name`
     |      
     |      `manager` must be an ``IResourceManager``
     |  
     |  get_resource_stream(manager, resource_name)
     |      Return a readable file-like object for `resource_name`
     |      
     |      `manager` must be an ``IResourceManager``
     |  
     |  get_resource_string(manager, resource_name)
     |      Return a string containing the contents of `resource_name`
     |      
     |      `manager` must be an ``IResourceManager``
     |  
     |  has_resource(resource_name)
     |      Does the package contain the named resource?
     |  
     |  resource_isdir(resource_name)
     |      Is the named resource a directory?  (like ``os.path.isdir()``)
     |  
     |  resource_listdir(resource_name)
     |      List of resource names in the directory (like ``os.listdir()``)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IMetadataProvider:
     |  
     |  get_metadata(name)
     |      The named metadata resource as a string
     |  
     |  get_metadata_lines(name)
     |      Yield named metadata resource as list of non-blank non-comment lines
     |      
     |      Leading and trailing whitespace is stripped from each line, and lines
     |      with ``#`` as the first non-blank character are omitted.
     |  
     |  has_metadata(name)
     |      Does the package's distribution contain the named metadata?
     |  
     |  metadata_isdir(name)
     |      Is the named metadata a directory?  (like ``os.path.isdir()``)
     |  
     |  metadata_listdir(name)
     |      List of metadata names in the directory (like ``os.listdir()``)
     |  
     |  run_script(script_name, namespace)
     |      Execute the named script in the supplied namespace dictionary
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from IMetadataProvider:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class NullProvider(builtins.object)
     |  NullProvider(module)
     |  
     |  Try to implement resources and metadata for arbitrary PEP 302 loaders
     |  
     |  Methods defined here:
     |  
     |  __init__(self, module)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_metadata(self, name)
     |  
     |  get_metadata_lines(self, name)
     |  
     |  get_resource_filename(self, manager, resource_name)
     |  
     |  get_resource_stream(self, manager, resource_name)
     |  
     |  get_resource_string(self, manager, resource_name)
     |  
     |  has_metadata(self, name)
     |  
     |  has_resource(self, resource_name)
     |  
     |  metadata_isdir(self, name)
     |  
     |  metadata_listdir(self, name)
     |  
     |  resource_isdir(self, resource_name)
     |  
     |  resource_listdir(self, resource_name)
     |  
     |  run_script(self, script_name, namespace)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  egg_info = None
     |  
     |  egg_name = None
     |  
     |  loader = None
    
    class PEP440Warning(builtins.RuntimeWarning)
     |  Used when there is an issue with a version or specifier not complying with
     |  PEP 440.
     |  
     |  Method resolution order:
     |      PEP440Warning
     |      builtins.RuntimeWarning
     |      builtins.Warning
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.RuntimeWarning:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.RuntimeWarning:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class PathMetadata(DefaultProvider)
     |  PathMetadata(path, egg_info)
     |  
     |  Metadata provider for egg directories
     |  
     |  Usage::
     |  
     |      # Development eggs:
     |  
     |      egg_info = "/path/to/PackageName.egg-info"
     |      base_dir = os.path.dirname(egg_info)
     |      metadata = PathMetadata(base_dir, egg_info)
     |      dist_name = os.path.splitext(os.path.basename(egg_info))[0]
     |      dist = Distribution(basedir, project_name=dist_name, metadata=metadata)
     |  
     |      # Unpacked egg directories:
     |  
     |      egg_path = "/path/to/PackageName-ver-pyver-etc.egg"
     |      metadata = PathMetadata(egg_path, os.path.join(egg_path,'EGG-INFO'))
     |      dist = Distribution.from_filename(egg_path, metadata=metadata)
     |  
     |  Method resolution order:
     |      PathMetadata
     |      DefaultProvider
     |      EggProvider
     |      NullProvider
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, path, egg_info)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DefaultProvider:
     |  
     |  get_resource_stream(self, manager, resource_name)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NullProvider:
     |  
     |  get_metadata(self, name)
     |  
     |  get_metadata_lines(self, name)
     |  
     |  get_resource_filename(self, manager, resource_name)
     |  
     |  get_resource_string(self, manager, resource_name)
     |  
     |  has_metadata(self, name)
     |  
     |  has_resource(self, resource_name)
     |  
     |  metadata_isdir(self, name)
     |  
     |  metadata_listdir(self, name)
     |  
     |  resource_isdir(self, resource_name)
     |  
     |  resource_listdir(self, resource_name)
     |  
     |  run_script(self, script_name, namespace)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NullProvider:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NullProvider:
     |  
     |  egg_info = None
     |  
     |  egg_name = None
     |  
     |  loader = None
    
    class PkgResourcesDeprecationWarning(builtins.Warning)
     |  Base class for warning about deprecations in ``pkg_resources``
     |  
     |  This class is not derived from ``DeprecationWarning``, and as such is
     |  visible by default.
     |  
     |  Method resolution order:
     |      PkgResourcesDeprecationWarning
     |      builtins.Warning
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Warning:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Warning:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class Requirement(pkg_resources.extern.packaging.requirements.Requirement)
     |  Requirement(requirement_string)
     |  
     |  Parse a requirement.
     |  
     |  Parse a given requirement string into its parts, such as name, specifier,
     |  URL, and extras. Raises InvalidRequirement on a badly-formed requirement
     |  string.
     |  
     |  Method resolution order:
     |      Requirement
     |      pkg_resources.extern.packaging.requirements.Requirement
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, item)
     |  
     |  __eq__(self, other)
     |      Return self==value.
     |  
     |  __hash__(self)
     |      Return hash(self).
     |  
     |  __init__(self, requirement_string)
     |      DO NOT CALL THIS UNDOCUMENTED METHOD; use Requirement.parse()!
     |  
     |  __ne__(self, other)
     |      Return self!=value.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  parse(s)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pkg_resources.extern.packaging.requirements.Requirement:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from pkg_resources.extern.packaging.requirements.Requirement:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ResolutionError(builtins.Exception)
     |  Abstract base for dependency resolution errors
     |  
     |  Method resolution order:
     |      ResolutionError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class ResourceManager(builtins.object)
     |  Manage resource extraction and packages
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  cleanup_resources(self, force=False)
     |      Delete all extracted resource files and directories, returning a list
     |      of the file and directory names that could not be successfully removed.
     |      This function does not have any concurrency protection, so it should
     |      generally only be called when the extraction path is a temporary
     |      directory exclusive to a single process.  This method is not
     |      automatically called; you must call it explicitly or register it as an
     |      ``atexit`` function if you wish to ensure cleanup of a temporary
     |      directory used for extractions.
     |  
     |  extraction_error(self)
     |      Give an error message for problems extracting file(s)
     |  
     |  get_cache_path(self, archive_name, names=())
     |      Return absolute location in cache for `archive_name` and `names`
     |      
     |      The parent directory of the resulting path will be created if it does
     |      not already exist.  `archive_name` should be the base filename of the
     |      enclosing egg (which may not be the name of the enclosing zipfile!),
     |      including its ".egg" extension.  `names`, if provided, should be a
     |      sequence of path name parts "under" the egg's extraction location.
     |      
     |      This method should only be called by resource providers that need to
     |      obtain an extraction location, and only for names they intend to
     |      extract, as it tracks the generated names for possible cleanup later.
     |  
     |  postprocess(self, tempname, filename)
     |      Perform any platform-specific postprocessing of `tempname`
     |      
     |      This is where Mac header rewrites should be done; other platforms don't
     |      have anything special they should do.
     |      
     |      Resource providers should call this method ONLY after successfully
     |      extracting a compressed resource.  They must NOT call it on resources
     |      that are already in the filesystem.
     |      
     |      `tempname` is the current (temporary) name of the file, and `filename`
     |      is the name it will be renamed to by the caller after this routine
     |      returns.
     |  
     |  resource_exists(self, package_or_requirement, resource_name)
     |      Does the named resource exist?
     |  
     |  resource_filename(self, package_or_requirement, resource_name)
     |      Return a true filesystem path for specified resource
     |  
     |  resource_isdir(self, package_or_requirement, resource_name)
     |      Is the named resource an existing directory?
     |  
     |  resource_listdir(self, package_or_requirement, resource_name)
     |      List the contents of the named resource directory
     |  
     |  resource_stream(self, package_or_requirement, resource_name)
     |      Return a readable file-like object for specified resource
     |  
     |  resource_string(self, package_or_requirement, resource_name)
     |      Return specified resource as a string
     |  
     |  set_extraction_path(self, path)
     |      Set the base path where resources will be extracted to, if needed.
     |      
     |      If you do not call this routine before any extractions take place, the
     |      path defaults to the return value of ``get_default_cache()``.  (Which
     |      is based on the ``PYTHON_EGG_CACHE`` environment variable, with various
     |      platform-specific fallbacks.  See that routine's documentation for more
     |      details.)
     |      
     |      Resources are extracted to subdirectories of this path based upon
     |      information given by the ``IResourceProvider``.  You may set this to a
     |      temporary directory, but then you must call ``cleanup_resources()`` to
     |      delete the extracted files when done.  There is no guarantee that
     |      ``cleanup_resources()`` will be able to remove all extracted files.
     |      
     |      (Note: you may not change the extraction path for a given resource
     |      manager once resources have been extracted, unless you first call
     |      ``cleanup_resources()``.)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  extraction_path = None
    
    class UnknownExtra(ResolutionError)
     |  Distribution doesn't have an "extra feature" of the given name
     |  
     |  Method resolution order:
     |      UnknownExtra
     |      ResolutionError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods inherited from ResolutionError:
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ResolutionError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class VersionConflict(ResolutionError)
     |  An already-installed version conflicts with the requested version.
     |  
     |  Should be initialized with the installed Distribution and the requested
     |  Requirement.
     |  
     |  Method resolution order:
     |      VersionConflict
     |      ResolutionError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  report(self)
     |  
     |  with_context(self, required_by)
     |      If required_by is non-empty, return a version of self that is a
     |      ContextualVersionConflict.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  dist
     |  
     |  req
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ResolutionError:
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ResolutionError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class WorkingSet(builtins.object)
     |  WorkingSet(entries=None)
     |  
     |  A collection of active distributions on sys.path (or a similar list)
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, dist)
     |      True if `dist` is the active distribution for its project
     |  
     |  __getstate__(self)
     |  
     |  __init__(self, entries=None)
     |      Create working set from list of path entries (default=sys.path)
     |  
     |  __iter__(self)
     |      Yield distributions for non-duplicate projects in the working set
     |      
     |      The yield order is the order in which the items' path entries were
     |      added to the working set.
     |  
     |  __setstate__(self, e_k_b_c)
     |  
     |  add(self, dist, entry=None, insert=True, replace=False)
     |      Add `dist` to working set, associated with `entry`
     |      
     |      If `entry` is unspecified, it defaults to the ``.location`` of `dist`.
     |      On exit from this routine, `entry` is added to the end of the working
     |      set's ``.entries`` (if it wasn't already present).
     |      
     |      `dist` is only added to the working set if it's for a project that
     |      doesn't already have a distribution in the set, unless `replace=True`.
     |      If it's added, any callbacks registered with the ``subscribe()`` method
     |      will be called.
     |  
     |  add_entry(self, entry)
     |      Add a path item to ``.entries``, finding any distributions on it
     |      
     |      ``find_distributions(entry, True)`` is used to find distributions
     |      corresponding to the path entry, and they are added.  `entry` is
     |      always appended to ``.entries``, even if it is already present.
     |      (This is because ``sys.path`` can contain the same value more than
     |      once, and the ``.entries`` of the ``sys.path`` WorkingSet should always
     |      equal ``sys.path``.)
     |  
     |  find(self, req)
     |      Find a distribution matching requirement `req`
     |      
     |      If there is an active distribution for the requested project, this
     |      returns it as long as it meets the version requirement specified by
     |      `req`.  But, if there is an active distribution for the project and it
     |      does *not* meet the `req` requirement, ``VersionConflict`` is raised.
     |      If there is no active distribution for the requested project, ``None``
     |      is returned.
     |  
     |  find_plugins(self, plugin_env, full_env=None, installer=None, fallback=True)
     |      Find all activatable distributions in `plugin_env`
     |      
     |      Example usage::
     |      
     |          distributions, errors = working_set.find_plugins(
     |              Environment(plugin_dirlist)
     |          )
     |          # add plugins+libs to sys.path
     |          map(working_set.add, distributions)
     |          # display errors
     |          print('Could not load', errors)
     |      
     |      The `plugin_env` should be an ``Environment`` instance that contains
     |      only distributions that are in the project's "plugin directory" or
     |      directories. The `full_env`, if supplied, should be an ``Environment``
     |      contains all currently-available distributions.  If `full_env` is not
     |      supplied, one is created automatically from the ``WorkingSet`` this
     |      method is called on, which will typically mean that every directory on
     |      ``sys.path`` will be scanned for distributions.
     |      
     |      `installer` is a standard installer callback as used by the
     |      ``resolve()`` method. The `fallback` flag indicates whether we should
     |      attempt to resolve older versions of a plugin if the newest version
     |      cannot be resolved.
     |      
     |      This method returns a 2-tuple: (`distributions`, `error_info`), where
     |      `distributions` is a list of the distributions found in `plugin_env`
     |      that were loadable, along with any other distributions that are needed
     |      to resolve their dependencies.  `error_info` is a dictionary mapping
     |      unloadable plugin distributions to an exception instance describing the
     |      error that occurred. Usually this will be a ``DistributionNotFound`` or
     |      ``VersionConflict`` instance.
     |  
     |  iter_entry_points(self, group, name=None)
     |      Yield entry point objects from `group` matching `name`
     |      
     |      If `name` is None, yields all entry points in `group` from all
     |      distributions in the working set, otherwise only ones matching
     |      both `group` and `name` are yielded (in distribution order).
     |  
     |  require(self, *requirements)
     |      Ensure that distributions matching `requirements` are activated
     |      
     |      `requirements` must be a string or a (possibly-nested) sequence
     |      thereof, specifying the distributions and versions required.  The
     |      return value is a sequence of the distributions that needed to be
     |      activated to fulfill the requirements; all relevant distributions are
     |      included, even if they were already activated in this working set.
     |  
     |  resolve(self, requirements, env=None, installer=None, replace_conflicting=False, extras=None)
     |      List all distributions needed to (recursively) meet `requirements`
     |      
     |      `requirements` must be a sequence of ``Requirement`` objects.  `env`,
     |      if supplied, should be an ``Environment`` instance.  If
     |      not supplied, it defaults to all distributions available within any
     |      entry or distribution in the working set.  `installer`, if supplied,
     |      will be invoked with each requirement that cannot be met by an
     |      already-installed distribution; it should return a ``Distribution`` or
     |      ``None``.
     |      
     |      Unless `replace_conflicting=True`, raises a VersionConflict exception
     |      if
     |      any requirements are found on the path that have the correct name but
     |      the wrong version.  Otherwise, if an `installer` is supplied it will be
     |      invoked to obtain the correct version of the requirement and activate
     |      it.
     |      
     |      `extras` is a list of the extras to be used with these requirements.
     |      This is important because extra requirements may look like `my_req;
     |      extra = "my_extra"`, which would otherwise be interpreted as a purely
     |      optional requirement.  Instead, we want to be able to assert that these
     |      requirements are truly required.
     |  
     |  run_script(self, requires, script_name)
     |      Locate distribution for `requires` and run `script_name` script
     |  
     |  subscribe(self, callback, existing=True)
     |      Invoke `callback` for all distributions
     |      
     |      If `existing=True` (default),
     |      call on all existing ones, as well.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class ZipProvider(EggProvider)
     |  ZipProvider(module)
     |  
     |  Resource support for zips and eggs
     |  
     |  Method resolution order:
     |      ZipProvider
     |      EggProvider
     |      NullProvider
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, module)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_resource_filename(self, manager, resource_name)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  zipinfo
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  eagers = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from NullProvider:
     |  
     |  get_metadata(self, name)
     |  
     |  get_metadata_lines(self, name)
     |  
     |  get_resource_stream(self, manager, resource_name)
     |  
     |  get_resource_string(self, manager, resource_name)
     |  
     |  has_metadata(self, name)
     |  
     |  has_resource(self, resource_name)
     |  
     |  metadata_isdir(self, name)
     |  
     |  metadata_listdir(self, name)
     |  
     |  resource_isdir(self, resource_name)
     |  
     |  resource_listdir(self, resource_name)
     |  
     |  run_script(self, script_name, namespace)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from NullProvider:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from NullProvider:
     |  
     |  egg_info = None
     |  
     |  egg_name = None
     |  
     |  loader = None
    
    __metaclass__ = class type(object)
     |  type(object_or_name, bases, dict)
     |  type(object) -> the object's type
     |  type(name, bases, dict) -> a new type
     |  
     |  Methods defined here:
     |  
     |  __call__(self, /, *args, **kwargs)
     |      Call self as a function.
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __dir__(self, /)
     |      Specialized __dir__ implementation for types.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __instancecheck__(self, instance, /)
     |      Check if an object is an instance.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __sizeof__(self, /)
     |      Return memory consumption of the type object.
     |  
     |  __subclasscheck__(self, subclass, /)
     |      Check if a class is a subclass.
     |  
     |  __subclasses__(self, /)
     |      Return a list of immediate subclasses.
     |  
     |  mro(self, /)
     |      Return a type's method resolution order.
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  __prepare__(...)
     |      __prepare__() -> dict
     |      used to create the namespace for the class statement
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __abstractmethods__
     |  
     |  __dict__
     |  
     |  __text_signature__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __base__ = <class 'object'>
     |      The most base type
     |  
     |  __bases__ = (<class 'object'>,)
     |  
     |  __basicsize__ = 864
     |  
     |  __dictoffset__ = 264
     |  
     |  __flags__ = 2148291584
     |  
     |  __itemsize__ = 40
     |  
     |  __mro__ = (<class 'type'>, <class 'object'>)
     |  
     |  __weakrefoffset__ = 368

FUNCTIONS
    __getstate__()
    
    __setstate__(state)
    
    add_activation_listener = subscribe(callback, existing=True) method of WorkingSet instance
        Invoke `callback` for all distributions
        
        If `existing=True` (default),
        call on all existing ones, as well.
    
    cleanup_resources(force=False) method of ResourceManager instance
        Delete all extracted resource files and directories, returning a list
        of the file and directory names that could not be successfully removed.
        This function does not have any concurrency protection, so it should
        generally only be called when the extraction path is a temporary
        directory exclusive to a single process.  This method is not
        automatically called; you must call it explicitly or register it as an
        ``atexit`` function if you wish to ensure cleanup of a temporary
        directory used for extractions.
    
    compatible_platforms(provided, required)
        Can code for the `provided` platform run on the `required` platform?
        
        Returns true if either platform is ``None``, or the platforms are equal.
        
        XXX Needs compatibility checks for Linux and other unixy OSes.
    
    declare_namespace(packageName)
        Declare that package 'packageName' is a namespace package
    
    ensure_directory(path)
        Ensure that the parent directory of `path` exists
    
    evaluate_marker(text, extra=None)
        Evaluate a PEP 508 environment marker.
        Return a boolean indicating the marker result in this environment.
        Raise SyntaxError if marker is invalid.
        
        This implementation uses the 'pyparsing' module.
    
    find_distributions(path_item, only=False)
        Yield distributions accessible via `path_item`
    
    fixup_namespace_packages(path_item, parent=None)
        Ensure that previously-declared namespace packages include path_item
    
    get_default_cache()
        Return the ``PYTHON_EGG_CACHE`` environment variable
        or a platform-relevant user cache dir for an app
        named "Python-Eggs".
    
    get_distribution(dist)
        Return a current distribution object for a Requirement or string
    
    get_entry_info(dist, group, name)
        Return the EntryPoint object for `group`+`name`, or ``None``
    
    get_entry_map(dist, group=None)
        Return the entry point map for `group`, or the full entry map
    
    get_importer(path_item)
        Retrieve a finder for the given path item
        
        The returned finder is cached in sys.path_importer_cache
        if it was newly created by a path hook.
        
        The cache (or part of it) can be cleared manually if a
        rescan of sys.path_hooks is necessary.
    
    get_platform = get_build_platform()
        Return this platform's string for platform-specific distributions
        
        XXX Currently this is the same as ``distutils.util.get_platform()``, but it
        needs some hacks for Linux and Mac OS X.
    
    get_provider(moduleOrReq)
        Return an IResourceProvider for the named module or requirement
    
    invalid_marker(text)
        Validate text as a PEP 508 environment marker; return an exception
        if invalid or False otherwise.
    
    iter_entry_points(group, name=None) method of WorkingSet instance
        Yield entry point objects from `group` matching `name`
        
        If `name` is None, yields all entry points in `group` from all
        distributions in the working set, otherwise only ones matching
        both `group` and `name` are yielded (in distribution order).
    
    load_entry_point(dist, group, name)
        Return `name` entry point of `group` for `dist` or raise ImportError
    
    normalize_path(filename)
        Normalize a file/dir name for comparison purposes
    
    parse_requirements(strs)
        Yield ``Requirement`` objects for each specification in `strs`
        
        `strs` must be a string, or a (possibly-nested) iterable thereof.
    
    parse_version(v)
    
    register_finder(importer_type, distribution_finder)
        Register `distribution_finder` to find distributions in sys.path items
        
        `importer_type` is the type or class of a PEP 302 "Importer" (sys.path item
        handler), and `distribution_finder` is a callable that, passed a path
        item and the importer instance, yields ``Distribution`` instances found on
        that path item.  See ``pkg_resources.find_on_path`` for an example.
    
    register_loader_type(loader_type, provider_factory)
        Register `provider_factory` to make providers for `loader_type`
        
        `loader_type` is the type or class of a PEP 302 ``module.__loader__``,
        and `provider_factory` is a function that, passed a *module* object,
        returns an ``IResourceProvider`` for that module.
    
    register_namespace_handler(importer_type, namespace_handler)
        Register `namespace_handler` to declare namespace packages
        
        `importer_type` is the type or class of a PEP 302 "Importer" (sys.path item
        handler), and `namespace_handler` is a callable like this::
        
            def namespace_handler(importer, path_entry, moduleName, module):
                # return a path_entry to use for child packages
        
        Namespace handlers are only called if the importer object has already
        agreed that it can handle the relevant path item, and they should only
        return a subpath if the module __path__ does not already contain an
        equivalent subpath.  For an example namespace handler, see
        ``pkg_resources.file_ns_handler``.
    
    require(*requirements) method of WorkingSet instance
        Ensure that distributions matching `requirements` are activated
        
        `requirements` must be a string or a (possibly-nested) sequence
        thereof, specifying the distributions and versions required.  The
        return value is a sequence of the distributions that needed to be
        activated to fulfill the requirements; all relevant distributions are
        included, even if they were already activated in this working set.
    
    resource_exists(package_or_requirement, resource_name) method of ResourceManager instance
        Does the named resource exist?
    
    resource_filename(package_or_requirement, resource_name) method of ResourceManager instance
        Return a true filesystem path for specified resource
    
    resource_isdir(package_or_requirement, resource_name) method of ResourceManager instance
        Is the named resource an existing directory?
    
    resource_listdir(package_or_requirement, resource_name) method of ResourceManager instance
        List the contents of the named resource directory
    
    resource_stream(package_or_requirement, resource_name) method of ResourceManager instance
        Return a readable file-like object for specified resource
    
    resource_string(package_or_requirement, resource_name) method of ResourceManager instance
        Return specified resource as a string
    
    run_main = run_script(requires, script_name) method of WorkingSet instance
        Locate distribution for `requires` and run `script_name` script
    
    run_script(requires, script_name) method of WorkingSet instance
        Locate distribution for `requires` and run `script_name` script
    
    safe_extra(extra)
        Convert an arbitrary string to a standard 'extra' name
        
        Any runs of non-alphanumeric characters are replaced with a single '_',
        and the result is always lowercased.
    
    safe_name(name)
        Convert an arbitrary string to a standard distribution name
        
        Any runs of non-alphanumeric/. characters are replaced with a single '-'.
    
    safe_version(version)
        Convert an arbitrary string to a standard version string
    
    set_extraction_path(path) method of ResourceManager instance
        Set the base path where resources will be extracted to, if needed.
        
        If you do not call this routine before any extractions take place, the
        path defaults to the return value of ``get_default_cache()``.  (Which
        is based on the ``PYTHON_EGG_CACHE`` environment variable, with various
        platform-specific fallbacks.  See that routine's documentation for more
        details.)
        
        Resources are extracted to subdirectories of this path based upon
        information given by the ``IResourceProvider``.  You may set this to a
        temporary directory, but then you must call ``cleanup_resources()`` to
        delete the extracted files when done.  There is no guarantee that
        ``cleanup_resources()`` will be able to remove all extracted files.
        
        (Note: you may not change the extraction path for a given resource
        manager once resources have been extracted, unless you first call
        ``cleanup_resources()``.)
    
    split_sections(s)
        Split a string or iterable thereof into (section, content) pairs
        
        Each ``section`` is a stripped version of the section header ("[section]")
        and each ``content`` is a list of stripped lines excluding blank lines and
        comment-only lines.  If there are any such lines before the first section
        header, they're returned in a first ``section`` of ``None``.
    
    to_filename(name)
        Convert a project or version name to its filename-escaped form
        
        Any '-' characters are currently replaced with '_'.
    
    yield_lines(strs)
        Yield non-empty/non-comment lines of a string or sequence

DATA
    BINARY_DIST = 2
    CHECKOUT_DIST = 0
    DEVELOP_DIST = -1
    EGG_DIST = 3
    SOURCE_DIST = 1
    __all__ = ['require', 'run_script', 'get_provider', 'get_distribution'...
    empty_provider = <pkg_resources.EmptyProvider object>
    working_set = <pkg_resources.WorkingSet object>

FILE
    c:\program files\python37\lib\site-packages\pkg_resources\__init__.py


