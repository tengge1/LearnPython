Help on module gzip:

NAME
    gzip - Functions that read and write gzipped files.

DESCRIPTION
    The user of the file doesn't have to worry about the compression,
    but random access is not allowed.

CLASSES
    _compression.BaseStream(io.BufferedIOBase)
        GzipFile
    
    class GzipFile(_compression.BaseStream)
     |  GzipFile(filename=None, mode=None, compresslevel=9, fileobj=None, mtime=None)
     |  
     |  The GzipFile class simulates most of the methods of a file object with
     |  the exception of the truncate() method.
     |  
     |  This class only supports opening files in binary mode. If you need to open a
     |  compressed file in text mode, use the gzip.open() function.
     |  
     |  Method resolution order:
     |      GzipFile
     |      _compression.BaseStream
     |      io.BufferedIOBase
     |      _io._BufferedIOBase
     |      io.IOBase
     |      _io._IOBase
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, filename=None, mode=None, compresslevel=9, fileobj=None, mtime=None)
     |      Constructor for the GzipFile class.
     |      
     |      At least one of fileobj and filename must be given a
     |      non-trivial value.
     |      
     |      The new class instance is based on fileobj, which can be a regular
     |      file, an io.BytesIO object, or any other object which simulates a file.
     |      It defaults to None, in which case filename is opened to provide
     |      a file object.
     |      
     |      When fileobj is not None, the filename argument is only used to be
     |      included in the gzip file header, which may include the original
     |      filename of the uncompressed file.  It defaults to the filename of
     |      fileobj, if discernible; otherwise, it defaults to the empty string,
     |      and in this case the original filename is not included in the header.
     |      
     |      The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', 'wb', 'x', or
     |      'xb' depending on whether the file will be read or written.  The default
     |      is the mode of fileobj if discernible; otherwise, the default is 'rb'.
     |      A mode of 'r' is equivalent to one of 'rb', and similarly for 'w' and
     |      'wb', 'a' and 'ab', and 'x' and 'xb'.
     |      
     |      The compresslevel argument is an integer from 0 to 9 controlling the
     |      level of compression; 1 is fastest and produces the least compression,
     |      and 9 is slowest and produces the most compression. 0 is no compression
     |      at all. The default is 9.
     |      
     |      The mtime argument is an optional numeric timestamp to be written
     |      to the last modification time field in the stream when compressing.
     |      If omitted or None, the current time is used.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  close(self)
     |      Flush and close the IO object.
     |      
     |      This method has no effect if the file is already closed.
     |  
     |  fileno(self)
     |      Invoke the underlying file object's fileno() method.
     |      
     |      This will raise AttributeError if the underlying file object
     |      doesn't support fileno().
     |  
     |  flush(self, zlib_mode=2)
     |      Flush write buffers, if applicable.
     |      
     |      This is not implemented for read-only and non-blocking streams.
     |  
     |  peek(self, n)
     |  
     |  read(self, size=-1)
     |      Read and return up to n bytes.
     |      
     |      If the argument is omitted, None, or negative, reads and
     |      returns all data until EOF.
     |      
     |      If the argument is positive, and the underlying raw stream is
     |      not 'interactive', multiple raw reads may be issued to satisfy
     |      the byte count (unless EOF is reached first).  But for
     |      interactive raw streams (as well as sockets and pipes), at most
     |      one raw read will be issued, and a short result does not imply
     |      that EOF is imminent.
     |      
     |      Returns an empty bytes object on EOF.
     |      
     |      Returns None if the underlying raw stream was open in non-blocking
     |      mode and no data is available at the moment.
     |  
     |  read1(self, size=-1)
     |      Implements BufferedIOBase.read1()
     |      
     |      Reads up to a buffer's worth of data is size is negative.
     |  
     |  readable(self)
     |      Return whether object was opened for reading.
     |      
     |      If False, read() will raise OSError.
     |  
     |  readline(self, size=-1)
     |      Read and return a line from the stream.
     |      
     |      If size is specified, at most size bytes will be read.
     |      
     |      The line terminator is always b'\n' for binary files; for text
     |      files, the newlines argument to open can be used to select the line
     |      terminator(s) recognized.
     |  
     |  rewind(self)
     |      Return the uncompressed stream file position indicator to the
     |      beginning of the file
     |  
     |  seek(self, offset, whence=0)
     |      Change stream position.
     |      
     |      Change the stream position to the given byte offset. The offset is
     |      interpreted relative to the position indicated by whence.  Values
     |      for whence are:
     |      
     |      * 0 -- start of stream (the default); offset should be zero or positive
     |      * 1 -- current stream position; offset may be negative
     |      * 2 -- end of stream; offset is usually negative
     |      
     |      Return the new absolute position.
     |  
     |  seekable(self)
     |      Return whether object supports random access.
     |      
     |      If False, seek(), tell() and truncate() will raise OSError.
     |      This method may need to do a test seek().
     |  
     |  writable(self)
     |      Return whether object was opened for writing.
     |      
     |      If False, write() will raise OSError.
     |  
     |  write(self, data)
     |      Write the given buffer to the IO stream.
     |      
     |      Returns the number of bytes written, which is always the length of b
     |      in bytes.
     |      
     |      Raises BlockingIOError if the buffer is full and the
     |      underlying raw stream cannot accept more data at the moment.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  closed
     |  
     |  filename
     |  
     |  mtime
     |      Last modification time read from stream, or None
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset()
     |  
     |  myfileobj = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _io._BufferedIOBase:
     |  
     |  detach(self, /)
     |      Disconnect this buffer from its underlying raw stream and return it.
     |      
     |      After the raw stream has been detached, the buffer is in an unusable
     |      state.
     |  
     |  readinto(self, buffer, /)
     |  
     |  readinto1(self, buffer, /)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _io._IOBase:
     |  
     |  __del__(...)
     |  
     |  __enter__(...)
     |  
     |  __exit__(...)
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __next__(self, /)
     |      Implement next(self).
     |  
     |  isatty(self, /)
     |      Return whether this is an 'interactive' stream.
     |      
     |      Return False if it can't be determined.
     |  
     |  readlines(self, hint=-1, /)
     |      Return a list of lines from the stream.
     |      
     |      hint can be specified to control the number of lines read: no more
     |      lines will be read if the total size (in bytes/characters) of all
     |      lines so far exceeds hint.
     |  
     |  tell(self, /)
     |      Return current stream position.
     |  
     |  truncate(...)
     |      Truncate file to size bytes.
     |      
     |      File pointer is left unchanged.  Size defaults to the current IO
     |      position as reported by tell().  Returns the new size.
     |  
     |  writelines(self, lines, /)
     |      Write a list of lines to stream.
     |      
     |      Line separators are not added, so it is usual for each of the
     |      lines provided to have a line separator at the end.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from _io._IOBase:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _io._IOBase:
     |  
     |  __dict__

FUNCTIONS
    compress(data, compresslevel=9)
        Compress data in one shot and return the compressed string.
        Optional argument is the compression level, in range of 0-9.
    
    decompress(data)
        Decompress a gzip compressed string in one shot.
        Return the decompressed string.
    
    open(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)
        Open a gzip-compressed file in binary or text mode.
        
        The filename argument can be an actual filename (a str or bytes object), or
        an existing file object to read from or write to.
        
        The mode argument can be "r", "rb", "w", "wb", "x", "xb", "a" or "ab" for
        binary mode, or "rt", "wt", "xt" or "at" for text mode. The default mode is
        "rb", and the default compresslevel is 9.
        
        For binary mode, this function is equivalent to the GzipFile constructor:
        GzipFile(filename, mode, compresslevel). In this case, the encoding, errors
        and newline arguments must not be provided.
        
        For text mode, a GzipFile object is created, and wrapped in an
        io.TextIOWrapper instance with the specified encoding, error handling
        behavior, and line ending(s).

DATA
    __all__ = ['GzipFile', 'open', 'compress', 'decompress']

FILE
    c:\program files\python37\lib\gzip.py


