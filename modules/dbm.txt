Help on package dbm:

NAME
    dbm - Generic interface to all dbm clones.

DESCRIPTION
    Use
    
            import dbm
            d = dbm.open(file, 'w', 0o666)
    
    The returned object is a dbm.gnu, dbm.ndbm or dbm.dumb object, dependent on the
    type of database being opened (determined by the whichdb function) in the case
    of an existing dbm. If the dbm does not exist and the create or new flag ('c'
    or 'n') was specified, the dbm type will be determined by the availability of
    the modules (tested in the above order).
    
    It has the following interface (key and data are strings):
    
            d[key] = data   # store data at key (may override data at
                            # existing key)
            data = d[key]   # retrieve data at key (raise KeyError if no
                            # such key)
            del d[key]      # delete data stored at key (raises KeyError
                            # if no such key)
            flag = key in d # true if the key exists
            list = d.keys() # return a list of all existing keys (slow!)
    
    Future versions may change the order in which implementations are
    tested for existence, and add interfaces to other dbm-like
    implementations.

PACKAGE CONTENTS
    dumb
    gnu
    ndbm

FUNCTIONS
    open(file, flag='r', mode=438)
        Open or create database at path given by *file*.
        
        Optional argument *flag* can be 'r' (default) for read-only access, 'w'
        for read-write access of an existing database, 'c' for read-write access
        to a new or existing database, and 'n' for read-write access to a new
        database.
        
        Note: 'r' and 'w' fail if the database doesn't exist; 'c' creates it
        only if it doesn't exist; and 'n' always creates a new database.
    
    whichdb(filename)
        Guess which db package to use to open a db file.
        
        Return values:
        
        - None if the database file can't be read;
        - empty string if the file can be read but can't be recognized
        - the name of the dbm submodule (e.g. "ndbm" or "gnu") if recognized.
        
        Importing the given module may still fail, and opening the
        database using that module may still fail.

DATA
    __all__ = ['open', 'whichdb', 'error']
    error = (<class 'dbm.error'>, <class 'OSError'>)

FILE
    c:\program files\python37\lib\dbm\__init__.py


