Help on module socketserver:

NAME
    socketserver - Generic socket server classes.

DESCRIPTION
    This module tries to capture the various aspects of defining a server:
    
    For socket-based servers:
    
    - address family:
            - AF_INET{,6}: IP (Internet Protocol) sockets (default)
            - AF_UNIX: Unix domain sockets
            - others, e.g. AF_DECNET are conceivable (see <socket.h>
    - socket type:
            - SOCK_STREAM (reliable stream, e.g. TCP)
            - SOCK_DGRAM (datagrams, e.g. UDP)
    
    For request-based servers (including socket-based):
    
    - client address verification before further looking at the request
            (This is actually a hook for any processing that needs to look
             at the request before anything else, e.g. logging)
    - how to handle multiple requests:
            - synchronous (one request is handled at a time)
            - forking (each request is handled by a new process)
            - threading (each request is handled by a new thread)
    
    The classes in this module favor the server type that is simplest to
    write: a synchronous TCP/IP server.  This is bad class design, but
    save some typing.  (There's also the issue that a deep class hierarchy
    slows down method lookups.)
    
    There are five classes in an inheritance diagram, four of which represent
    synchronous servers of four types:
    
            +------------+
            | BaseServer |
            +------------+
                  |
                  v
            +-----------+        +------------------+
            | TCPServer |------->| UnixStreamServer |
            +-----------+        +------------------+
                  |
                  v
            +-----------+        +--------------------+
            | UDPServer |------->| UnixDatagramServer |
            +-----------+        +--------------------+
    
    Note that UnixDatagramServer derives from UDPServer, not from
    UnixStreamServer -- the only difference between an IP and a Unix
    stream server is the address family, which is simply repeated in both
    unix server classes.
    
    Forking and threading versions of each type of server can be created
    using the ForkingMixIn and ThreadingMixIn mix-in classes.  For
    instance, a threading UDP server class is created as follows:
    
            class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass
    
    The Mix-in class must come first, since it overrides a method defined
    in UDPServer! Setting the various member variables also changes
    the behavior of the underlying server mechanism.
    
    To implement a service, you must derive a class from
    BaseRequestHandler and redefine its handle() method.  You can then run
    various versions of the service by combining one of the server classes
    with your request handler class.
    
    The request handler class must be different for datagram or stream
    services.  This can be hidden by using the request handler
    subclasses StreamRequestHandler or DatagramRequestHandler.
    
    Of course, you still have to use your head!
    
    For instance, it makes no sense to use a forking server if the service
    contains state in memory that can be modified by requests (since the
    modifications in the child process would never reach the initial state
    kept in the parent process and passed to each child).  In this case,
    you can use a threading server, but you will probably have to use
    locks to avoid two requests that come in nearly simultaneous to apply
    conflicting changes to the server state.
    
    On the other hand, if you are building e.g. an HTTP server, where all
    data is stored externally (e.g. in the file system), a synchronous
    class will essentially render the service "deaf" while one request is
    being handled -- which may be for a very long time if a client is slow
    to read all the data it has requested.  Here a threading or forking
    server is appropriate.
    
    In some cases, it may be appropriate to process part of a request
    synchronously, but to finish processing in a forked child depending on
    the request data.  This can be implemented by using a synchronous
    server and doing an explicit fork in the request handler class
    handle() method.
    
    Another approach to handling multiple simultaneous requests in an
    environment that supports neither threads nor fork (or where these are
    too expensive or inappropriate for the service) is to maintain an
    explicit table of partially finished requests and to use a selector to
    decide which request to work on next (or whether to handle a new
    incoming request).  This is particularly important for stream services
    where each client can potentially be connected for a long time (if
    threads or subprocesses cannot be used).
    
    Future work:
    - Standard classes for Sun RPC (which uses either UDP or TCP)
    - Standard mix-in classes to implement various authentication
      and encryption schemes
    
    XXX Open problems:
    - What to do with out-of-band data?
    
    BaseServer:
    - split generic "request" functionality out into BaseServer class.
      Copyright (C) 2000  Luke Kenneth Casson Leighton <lkcl@samba.org>
    
      example: read entries from a SQL database (requires overriding
      get_request() to return a table entry from the database).
      entry is processed by a RequestHandlerClass.

CLASSES
    builtins.object
        BaseRequestHandler
            DatagramRequestHandler
            StreamRequestHandler
        BaseServer
            TCPServer
                UDPServer
        ThreadingMixIn
            ThreadingTCPServer(ThreadingMixIn, TCPServer)
            ThreadingUDPServer(ThreadingMixIn, UDPServer)
    
    class BaseRequestHandler(builtins.object)
     |  BaseRequestHandler(request, client_address, server)
     |  
     |  Base class for request handler classes.
     |  
     |  This class is instantiated for each request to be handled.  The
     |  constructor sets the instance variables request, client_address
     |  and server, and then calls the handle() method.  To implement a
     |  specific service, all you need to do is to derive a class which
     |  defines a handle() method.
     |  
     |  The handle() method can find the request as self.request, the
     |  client address as self.client_address, and the server (in case it
     |  needs access to per-server information) as self.server.  Since a
     |  separate instance is created for each request, the handle() method
     |  can define other arbitrary instance variables.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, request, client_address, server)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  finish(self)
     |  
     |  handle(self)
     |  
     |  setup(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class BaseServer(builtins.object)
     |  BaseServer(server_address, RequestHandlerClass)
     |  
     |  Base class for server classes.
     |  
     |  Methods for the caller:
     |  
     |  - __init__(server_address, RequestHandlerClass)
     |  - serve_forever(poll_interval=0.5)
     |  - shutdown()
     |  - handle_request()  # if you do not use serve_forever()
     |  - fileno() -> int   # for selector
     |  
     |  Methods that may be overridden:
     |  
     |  - server_bind()
     |  - server_activate()
     |  - get_request() -> request, client_address
     |  - handle_timeout()
     |  - verify_request(request, client_address)
     |  - server_close()
     |  - process_request(request, client_address)
     |  - shutdown_request(request)
     |  - close_request(request)
     |  - service_actions()
     |  - handle_error()
     |  
     |  Methods for derived classes:
     |  
     |  - finish_request(request, client_address)
     |  
     |  Class variables that may be overridden by derived classes or
     |  instances:
     |  
     |  - timeout
     |  - address_family
     |  - socket_type
     |  - allow_reuse_address
     |  
     |  Instance variables:
     |  
     |  - RequestHandlerClass
     |  - socket
     |  
     |  Methods defined here:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  __init__(self, server_address, RequestHandlerClass)
     |      Constructor.  May be extended, do not override.
     |  
     |  close_request(self, request)
     |      Called to clean up an individual request.
     |  
     |  finish_request(self, request, client_address)
     |      Finish one request by instantiating RequestHandlerClass.
     |  
     |  handle_error(self, request, client_address)
     |      Handle an error gracefully.  May be overridden.
     |      
     |      The default is to print a traceback and continue.
     |  
     |  handle_request(self)
     |      Handle one request, possibly blocking.
     |      
     |      Respects self.timeout.
     |  
     |  handle_timeout(self)
     |      Called if no new request arrives within self.timeout.
     |      
     |      Overridden by ForkingMixIn.
     |  
     |  process_request(self, request, client_address)
     |      Call finish_request.
     |      
     |      Overridden by ForkingMixIn and ThreadingMixIn.
     |  
     |  serve_forever(self, poll_interval=0.5)
     |      Handle one request at a time until shutdown.
     |      
     |      Polls for shutdown every poll_interval seconds. Ignores
     |      self.timeout. If you need to do periodic tasks, do them in
     |      another thread.
     |  
     |  server_activate(self)
     |      Called by constructor to activate the server.
     |      
     |      May be overridden.
     |  
     |  server_close(self)
     |      Called to clean-up the server.
     |      
     |      May be overridden.
     |  
     |  service_actions(self)
     |      Called by the serve_forever() loop.
     |      
     |      May be overridden by a subclass / Mixin to implement any code that
     |      needs to be run during the loop.
     |  
     |  shutdown(self)
     |      Stops the serve_forever loop.
     |      
     |      Blocks until the loop has finished. This must be called while
     |      serve_forever() is running in another thread, or it will
     |      deadlock.
     |  
     |  shutdown_request(self, request)
     |      Called to shutdown and close an individual request.
     |  
     |  verify_request(self, request, client_address)
     |      Verify the request.  May be overridden.
     |      
     |      Return True if we should proceed with this request.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  timeout = None
    
    class DatagramRequestHandler(BaseRequestHandler)
     |  DatagramRequestHandler(request, client_address, server)
     |  
     |  Define self.rfile and self.wfile for datagram sockets.
     |  
     |  Method resolution order:
     |      DatagramRequestHandler
     |      BaseRequestHandler
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  finish(self)
     |  
     |  setup(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseRequestHandler:
     |  
     |  __init__(self, request, client_address, server)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  handle(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseRequestHandler:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class StreamRequestHandler(BaseRequestHandler)
     |  StreamRequestHandler(request, client_address, server)
     |  
     |  Define self.rfile and self.wfile for stream sockets.
     |  
     |  Method resolution order:
     |      StreamRequestHandler
     |      BaseRequestHandler
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  finish(self)
     |  
     |  setup(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  disable_nagle_algorithm = False
     |  
     |  rbufsize = -1
     |  
     |  timeout = None
     |  
     |  wbufsize = 0
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseRequestHandler:
     |  
     |  __init__(self, request, client_address, server)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  handle(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseRequestHandler:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class TCPServer(BaseServer)
     |  TCPServer(server_address, RequestHandlerClass, bind_and_activate=True)
     |  
     |  Base class for various socket-based server classes.
     |  
     |  Defaults to synchronous IP stream (i.e., TCP).
     |  
     |  Methods for the caller:
     |  
     |  - __init__(server_address, RequestHandlerClass, bind_and_activate=True)
     |  - serve_forever(poll_interval=0.5)
     |  - shutdown()
     |  - handle_request()  # if you don't use serve_forever()
     |  - fileno() -> int   # for selector
     |  
     |  Methods that may be overridden:
     |  
     |  - server_bind()
     |  - server_activate()
     |  - get_request() -> request, client_address
     |  - handle_timeout()
     |  - verify_request(request, client_address)
     |  - process_request(request, client_address)
     |  - shutdown_request(request)
     |  - close_request(request)
     |  - handle_error()
     |  
     |  Methods for derived classes:
     |  
     |  - finish_request(request, client_address)
     |  
     |  Class variables that may be overridden by derived classes or
     |  instances:
     |  
     |  - timeout
     |  - address_family
     |  - socket_type
     |  - request_queue_size (only for stream sockets)
     |  - allow_reuse_address
     |  
     |  Instance variables:
     |  
     |  - server_address
     |  - RequestHandlerClass
     |  - socket
     |  
     |  Method resolution order:
     |      TCPServer
     |      BaseServer
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, server_address, RequestHandlerClass, bind_and_activate=True)
     |      Constructor.  May be extended, do not override.
     |  
     |  close_request(self, request)
     |      Called to clean up an individual request.
     |  
     |  fileno(self)
     |      Return socket file number.
     |      
     |      Interface required by selector.
     |  
     |  get_request(self)
     |      Get the request and client address from the socket.
     |      
     |      May be overridden.
     |  
     |  server_activate(self)
     |      Called by constructor to activate the server.
     |      
     |      May be overridden.
     |  
     |  server_bind(self)
     |      Called by constructor to bind the socket.
     |      
     |      May be overridden.
     |  
     |  server_close(self)
     |      Called to clean-up the server.
     |      
     |      May be overridden.
     |  
     |  shutdown_request(self, request)
     |      Called to shutdown and close an individual request.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  address_family = <AddressFamily.AF_INET: 2>
     |  
     |  allow_reuse_address = False
     |  
     |  request_queue_size = 5
     |  
     |  socket_type = <SocketKind.SOCK_STREAM: 1>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseServer:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  finish_request(self, request, client_address)
     |      Finish one request by instantiating RequestHandlerClass.
     |  
     |  handle_error(self, request, client_address)
     |      Handle an error gracefully.  May be overridden.
     |      
     |      The default is to print a traceback and continue.
     |  
     |  handle_request(self)
     |      Handle one request, possibly blocking.
     |      
     |      Respects self.timeout.
     |  
     |  handle_timeout(self)
     |      Called if no new request arrives within self.timeout.
     |      
     |      Overridden by ForkingMixIn.
     |  
     |  process_request(self, request, client_address)
     |      Call finish_request.
     |      
     |      Overridden by ForkingMixIn and ThreadingMixIn.
     |  
     |  serve_forever(self, poll_interval=0.5)
     |      Handle one request at a time until shutdown.
     |      
     |      Polls for shutdown every poll_interval seconds. Ignores
     |      self.timeout. If you need to do periodic tasks, do them in
     |      another thread.
     |  
     |  service_actions(self)
     |      Called by the serve_forever() loop.
     |      
     |      May be overridden by a subclass / Mixin to implement any code that
     |      needs to be run during the loop.
     |  
     |  shutdown(self)
     |      Stops the serve_forever loop.
     |      
     |      Blocks until the loop has finished. This must be called while
     |      serve_forever() is running in another thread, or it will
     |      deadlock.
     |  
     |  verify_request(self, request, client_address)
     |      Verify the request.  May be overridden.
     |      
     |      Return True if we should proceed with this request.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseServer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseServer:
     |  
     |  timeout = None
    
    class ThreadingMixIn(builtins.object)
     |  Mix-in class to handle each request in a new thread.
     |  
     |  Methods defined here:
     |  
     |  process_request(self, request, client_address)
     |      Start a new thread to process the request.
     |  
     |  process_request_thread(self, request, client_address)
     |      Same as in BaseServer but as a thread.
     |      
     |      In addition, exception handling is done here.
     |  
     |  server_close(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  block_on_close = True
     |  
     |  daemon_threads = False
    
    class ThreadingTCPServer(ThreadingMixIn, TCPServer)
     |  ThreadingTCPServer(server_address, RequestHandlerClass, bind_and_activate=True)
     |  
     |  Mix-in class to handle each request in a new thread.
     |  
     |  Method resolution order:
     |      ThreadingTCPServer
     |      ThreadingMixIn
     |      TCPServer
     |      BaseServer
     |      builtins.object
     |  
     |  Methods inherited from ThreadingMixIn:
     |  
     |  process_request(self, request, client_address)
     |      Start a new thread to process the request.
     |  
     |  process_request_thread(self, request, client_address)
     |      Same as in BaseServer but as a thread.
     |      
     |      In addition, exception handling is done here.
     |  
     |  server_close(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ThreadingMixIn:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ThreadingMixIn:
     |  
     |  block_on_close = True
     |  
     |  daemon_threads = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TCPServer:
     |  
     |  __init__(self, server_address, RequestHandlerClass, bind_and_activate=True)
     |      Constructor.  May be extended, do not override.
     |  
     |  close_request(self, request)
     |      Called to clean up an individual request.
     |  
     |  fileno(self)
     |      Return socket file number.
     |      
     |      Interface required by selector.
     |  
     |  get_request(self)
     |      Get the request and client address from the socket.
     |      
     |      May be overridden.
     |  
     |  server_activate(self)
     |      Called by constructor to activate the server.
     |      
     |      May be overridden.
     |  
     |  server_bind(self)
     |      Called by constructor to bind the socket.
     |      
     |      May be overridden.
     |  
     |  shutdown_request(self, request)
     |      Called to shutdown and close an individual request.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from TCPServer:
     |  
     |  address_family = <AddressFamily.AF_INET: 2>
     |  
     |  allow_reuse_address = False
     |  
     |  request_queue_size = 5
     |  
     |  socket_type = <SocketKind.SOCK_STREAM: 1>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseServer:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  finish_request(self, request, client_address)
     |      Finish one request by instantiating RequestHandlerClass.
     |  
     |  handle_error(self, request, client_address)
     |      Handle an error gracefully.  May be overridden.
     |      
     |      The default is to print a traceback and continue.
     |  
     |  handle_request(self)
     |      Handle one request, possibly blocking.
     |      
     |      Respects self.timeout.
     |  
     |  handle_timeout(self)
     |      Called if no new request arrives within self.timeout.
     |      
     |      Overridden by ForkingMixIn.
     |  
     |  serve_forever(self, poll_interval=0.5)
     |      Handle one request at a time until shutdown.
     |      
     |      Polls for shutdown every poll_interval seconds. Ignores
     |      self.timeout. If you need to do periodic tasks, do them in
     |      another thread.
     |  
     |  service_actions(self)
     |      Called by the serve_forever() loop.
     |      
     |      May be overridden by a subclass / Mixin to implement any code that
     |      needs to be run during the loop.
     |  
     |  shutdown(self)
     |      Stops the serve_forever loop.
     |      
     |      Blocks until the loop has finished. This must be called while
     |      serve_forever() is running in another thread, or it will
     |      deadlock.
     |  
     |  verify_request(self, request, client_address)
     |      Verify the request.  May be overridden.
     |      
     |      Return True if we should proceed with this request.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseServer:
     |  
     |  timeout = None
    
    class ThreadingUDPServer(ThreadingMixIn, UDPServer)
     |  ThreadingUDPServer(server_address, RequestHandlerClass, bind_and_activate=True)
     |  
     |  Mix-in class to handle each request in a new thread.
     |  
     |  Method resolution order:
     |      ThreadingUDPServer
     |      ThreadingMixIn
     |      UDPServer
     |      TCPServer
     |      BaseServer
     |      builtins.object
     |  
     |  Methods inherited from ThreadingMixIn:
     |  
     |  process_request(self, request, client_address)
     |      Start a new thread to process the request.
     |  
     |  process_request_thread(self, request, client_address)
     |      Same as in BaseServer but as a thread.
     |      
     |      In addition, exception handling is done here.
     |  
     |  server_close(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ThreadingMixIn:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from ThreadingMixIn:
     |  
     |  block_on_close = True
     |  
     |  daemon_threads = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from UDPServer:
     |  
     |  close_request(self, request)
     |      Called to clean up an individual request.
     |  
     |  get_request(self)
     |      Get the request and client address from the socket.
     |      
     |      May be overridden.
     |  
     |  server_activate(self)
     |      Called by constructor to activate the server.
     |      
     |      May be overridden.
     |  
     |  shutdown_request(self, request)
     |      Called to shutdown and close an individual request.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from UDPServer:
     |  
     |  allow_reuse_address = False
     |  
     |  max_packet_size = 8192
     |  
     |  socket_type = <SocketKind.SOCK_DGRAM: 2>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TCPServer:
     |  
     |  __init__(self, server_address, RequestHandlerClass, bind_and_activate=True)
     |      Constructor.  May be extended, do not override.
     |  
     |  fileno(self)
     |      Return socket file number.
     |      
     |      Interface required by selector.
     |  
     |  server_bind(self)
     |      Called by constructor to bind the socket.
     |      
     |      May be overridden.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from TCPServer:
     |  
     |  address_family = <AddressFamily.AF_INET: 2>
     |  
     |  request_queue_size = 5
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseServer:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  finish_request(self, request, client_address)
     |      Finish one request by instantiating RequestHandlerClass.
     |  
     |  handle_error(self, request, client_address)
     |      Handle an error gracefully.  May be overridden.
     |      
     |      The default is to print a traceback and continue.
     |  
     |  handle_request(self)
     |      Handle one request, possibly blocking.
     |      
     |      Respects self.timeout.
     |  
     |  handle_timeout(self)
     |      Called if no new request arrives within self.timeout.
     |      
     |      Overridden by ForkingMixIn.
     |  
     |  serve_forever(self, poll_interval=0.5)
     |      Handle one request at a time until shutdown.
     |      
     |      Polls for shutdown every poll_interval seconds. Ignores
     |      self.timeout. If you need to do periodic tasks, do them in
     |      another thread.
     |  
     |  service_actions(self)
     |      Called by the serve_forever() loop.
     |      
     |      May be overridden by a subclass / Mixin to implement any code that
     |      needs to be run during the loop.
     |  
     |  shutdown(self)
     |      Stops the serve_forever loop.
     |      
     |      Blocks until the loop has finished. This must be called while
     |      serve_forever() is running in another thread, or it will
     |      deadlock.
     |  
     |  verify_request(self, request, client_address)
     |      Verify the request.  May be overridden.
     |      
     |      Return True if we should proceed with this request.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseServer:
     |  
     |  timeout = None
    
    class UDPServer(TCPServer)
     |  UDPServer(server_address, RequestHandlerClass, bind_and_activate=True)
     |  
     |  UDP server class.
     |  
     |  Method resolution order:
     |      UDPServer
     |      TCPServer
     |      BaseServer
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  close_request(self, request)
     |      Called to clean up an individual request.
     |  
     |  get_request(self)
     |      Get the request and client address from the socket.
     |      
     |      May be overridden.
     |  
     |  server_activate(self)
     |      Called by constructor to activate the server.
     |      
     |      May be overridden.
     |  
     |  shutdown_request(self, request)
     |      Called to shutdown and close an individual request.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  allow_reuse_address = False
     |  
     |  max_packet_size = 8192
     |  
     |  socket_type = <SocketKind.SOCK_DGRAM: 2>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TCPServer:
     |  
     |  __init__(self, server_address, RequestHandlerClass, bind_and_activate=True)
     |      Constructor.  May be extended, do not override.
     |  
     |  fileno(self)
     |      Return socket file number.
     |      
     |      Interface required by selector.
     |  
     |  server_bind(self)
     |      Called by constructor to bind the socket.
     |      
     |      May be overridden.
     |  
     |  server_close(self)
     |      Called to clean-up the server.
     |      
     |      May be overridden.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from TCPServer:
     |  
     |  address_family = <AddressFamily.AF_INET: 2>
     |  
     |  request_queue_size = 5
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseServer:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  finish_request(self, request, client_address)
     |      Finish one request by instantiating RequestHandlerClass.
     |  
     |  handle_error(self, request, client_address)
     |      Handle an error gracefully.  May be overridden.
     |      
     |      The default is to print a traceback and continue.
     |  
     |  handle_request(self)
     |      Handle one request, possibly blocking.
     |      
     |      Respects self.timeout.
     |  
     |  handle_timeout(self)
     |      Called if no new request arrives within self.timeout.
     |      
     |      Overridden by ForkingMixIn.
     |  
     |  process_request(self, request, client_address)
     |      Call finish_request.
     |      
     |      Overridden by ForkingMixIn and ThreadingMixIn.
     |  
     |  serve_forever(self, poll_interval=0.5)
     |      Handle one request at a time until shutdown.
     |      
     |      Polls for shutdown every poll_interval seconds. Ignores
     |      self.timeout. If you need to do periodic tasks, do them in
     |      another thread.
     |  
     |  service_actions(self)
     |      Called by the serve_forever() loop.
     |      
     |      May be overridden by a subclass / Mixin to implement any code that
     |      needs to be run during the loop.
     |  
     |  shutdown(self)
     |      Stops the serve_forever loop.
     |      
     |      Blocks until the loop has finished. This must be called while
     |      serve_forever() is running in another thread, or it will
     |      deadlock.
     |  
     |  verify_request(self, request, client_address)
     |      Verify the request.  May be overridden.
     |      
     |      Return True if we should proceed with this request.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseServer:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseServer:
     |  
     |  timeout = None

DATA
    __all__ = ['BaseServer', 'TCPServer', 'UDPServer', 'ThreadingUDPServer...

VERSION
    0.4

FILE
    c:\program files\python37\lib\socketserver.py


