Help on module _threading_local:

NAME
    _threading_local - Thread-local objects.

DESCRIPTION
    (Note that this module provides a Python version of the threading.local
     class.  Depending on the version of Python you're using, there may be a
     faster one available.  You should always import the `local` class from
     `threading`.)
    
    Thread-local objects support the management of thread-local data.
    If you have data that you want to be local to a thread, simply create
    a thread-local object and use its attributes:
    
      >>> mydata = local()
      >>> mydata.number = 42
      >>> mydata.number
      42
    
    You can also access the local-object's dictionary:
    
      >>> mydata.__dict__
      {'number': 42}
      >>> mydata.__dict__.setdefault('widgets', [])
      []
      >>> mydata.widgets
      []
    
    What's important about thread-local objects is that their data are
    local to a thread. If we access the data in a different thread:
    
      >>> log = []
      >>> def f():
      ...     items = sorted(mydata.__dict__.items())
      ...     log.append(items)
      ...     mydata.number = 11
      ...     log.append(mydata.number)
    
      >>> import threading
      >>> thread = threading.Thread(target=f)
      >>> thread.start()
      >>> thread.join()
      >>> log
      [[], 11]
    
    we get different data.  Furthermore, changes made in the other thread
    don't affect data seen in this thread:
    
      >>> mydata.number
      42
    
    Of course, values you get from a local object, including a __dict__
    attribute, are for whatever thread was current at the time the
    attribute was read.  For that reason, you generally don't want to save
    these values across threads, as they apply only to the thread they
    came from.
    
    You can create custom local objects by subclassing the local class:
    
      >>> class MyLocal(local):
      ...     number = 2
      ...     def __init__(self, **kw):
      ...         self.__dict__.update(kw)
      ...     def squared(self):
      ...         return self.number ** 2
    
    This can be useful to support default values, methods and
    initialization.  Note that if you define an __init__ method, it will be
    called each time the local object is used in a separate thread.  This
    is necessary to initialize each thread's dictionary.
    
    Now if we create a local object:
    
      >>> mydata = MyLocal(color='red')
    
    Now we have a default number:
    
      >>> mydata.number
      2
    
    an initial color:
    
      >>> mydata.color
      'red'
      >>> del mydata.color
    
    And a method that operates on the data:
    
      >>> mydata.squared()
      4
    
    As before, we can access the data in a separate thread:
    
      >>> log = []
      >>> thread = threading.Thread(target=f)
      >>> thread.start()
      >>> thread.join()
      >>> log
      [[('color', 'red')], 11]
    
    without affecting this thread's data:
    
      >>> mydata.number
      2
      >>> mydata.color
      Traceback (most recent call last):
      ...
      AttributeError: 'MyLocal' object has no attribute 'color'
    
    Note that subclasses can define slots, but they are not thread
    local. They are shared across threads:
    
      >>> class MyLocal(local):
      ...     __slots__ = 'number'
    
      >>> mydata = MyLocal()
      >>> mydata.number = 42
      >>> mydata.color = 'red'
    
    So, the separate thread:
    
      >>> thread = threading.Thread(target=f)
      >>> thread.start()
      >>> thread.join()
    
    affects what we see:
    
      >>> mydata.number
      11
    
    >>> del mydata

CLASSES
    builtins.object
        local
    
    class local(builtins.object)
     |  local(*args, **kw)
     |  
     |  Methods defined here:
     |  
     |  __delattr__(self, name)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name)
     |      Return getattr(self, name).
     |  
     |  __setattr__(self, name, value)
     |      Implement setattr(self, name, value).
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(cls, *args, **kw)
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)

DATA
    __all__ = ['local']

FILE
    c:\program files\python37\lib\_threading_local.py


