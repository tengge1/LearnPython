Help on built-in module winreg:

NAME
    winreg - This module provides access to the Windows registry API.

DESCRIPTION
    Functions:
    
    CloseKey() - Closes a registry key.
    ConnectRegistry() - Establishes a connection to a predefined registry handle
                        on another computer.
    CreateKey() - Creates the specified key, or opens it if it already exists.
    DeleteKey() - Deletes the specified key.
    DeleteValue() - Removes a named value from the specified registry key.
    EnumKey() - Enumerates subkeys of the specified open registry key.
    EnumValue() - Enumerates values of the specified open registry key.
    ExpandEnvironmentStrings() - Expand the env strings in a REG_EXPAND_SZ
                                 string.
    FlushKey() - Writes all the attributes of the specified key to the registry.
    LoadKey() - Creates a subkey under HKEY_USER or HKEY_LOCAL_MACHINE and
                stores registration information from a specified file into that
                subkey.
    OpenKey() - Opens the specified key.
    OpenKeyEx() - Alias of OpenKey().
    QueryValue() - Retrieves the value associated with the unnamed value for a
                   specified key in the registry.
    QueryValueEx() - Retrieves the type and data for a specified value name
                     associated with an open registry key.
    QueryInfoKey() - Returns information about the specified key.
    SaveKey() - Saves the specified key, and all its subkeys a file.
    SetValue() - Associates a value with a specified key.
    SetValueEx() - Stores data in the value field of an open registry key.
    
    Special objects:
    
    HKEYType -- type object for HKEY objects
    error -- exception raised for Win32 errors
    
    Integer constants:
    Many constants are defined - see the documentation for each function
    to see what constants are used, and where.

FUNCTIONS
    CloseKey(hkey, /)
        Closes a previously opened registry key.
        
          hkey
            A previously opened key.
        
        Note that if the key is not closed using this method, it will be
        closed when the hkey object is destroyed by Python.
    
    ConnectRegistry(computer_name, key, /)
        Establishes a connection to the registry on another computer.
        
          computer_name
            The name of the remote computer, of the form r"\\computername".  If
            None, the local computer is used.
          key
            The predefined key to connect to.
        
        The return value is the handle of the opened key.
        If the function fails, an OSError exception is raised.
    
    CreateKey(key, sub_key, /)
        Creates or opens the specified key.
        
          key
            An already open key, or one of the predefined HKEY_* constants.
          sub_key
            The name of the key this method opens or creates.
        
        If key is one of the predefined keys, sub_key may be None. In that case,
        the handle returned is the same key handle passed in to the function.
        
        If the key already exists, this function opens the existing key.
        
        The return value is the handle of the opened key.
        If the function fails, an OSError exception is raised.
    
    CreateKeyEx(key, sub_key, reserved=0, access=131078)
        Creates or opens the specified key.
        
          key
            An already open key, or one of the predefined HKEY_* constants.
          sub_key
            The name of the key this method opens or creates.
          reserved
            A reserved integer, and must be zero.  Default is zero.
          access
            An integer that specifies an access mask that describes the
            desired security access for the key. Default is KEY_WRITE.
        
        If key is one of the predefined keys, sub_key may be None. In that case,
        the handle returned is the same key handle passed in to the function.
        
        If the key already exists, this function opens the existing key
        
        The return value is the handle of the opened key.
        If the function fails, an OSError exception is raised.
    
    DeleteKey(key, sub_key, /)
        Deletes the specified key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          sub_key
            A string that must be the name of a subkey of the key identified by
            the key parameter. This value must not be None, and the key may not
            have subkeys.
        
        This method can not delete keys with subkeys.
        
        If the function succeeds, the entire key, including all of its values,
        is removed.  If the function fails, an OSError exception is raised.
    
    DeleteKeyEx(key, sub_key, access=256, reserved=0)
        Deletes the specified key (64-bit OS only).
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          sub_key
            A string that must be the name of a subkey of the key identified by
            the key parameter. This value must not be None, and the key may not
            have subkeys.
          access
            An integer that specifies an access mask that describes the
            desired security access for the key. Default is KEY_WOW64_64KEY.
          reserved
            A reserved integer, and must be zero.  Default is zero.
        
        This method can not delete keys with subkeys.
        
        If the function succeeds, the entire key, including all of its values,
        is removed.  If the function fails, an OSError exception is raised.
        On unsupported Windows versions, NotImplementedError is raised.
    
    DeleteValue(key, value, /)
        Removes a named value from a registry key.
        
        key
          An already open key, or any one of the predefined HKEY_* constants.
        value
          A string that identifies the value to remove.
    
    DisableReflectionKey(key, /)
        Disables registry reflection for 32bit processes running on a 64bit OS.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
        
        Will generally raise NotImplemented if executed on a 32bit OS.
        
        If the key is not on the reflection list, the function succeeds but has
        no effect.  Disabling reflection for a key does not affect reflection
        of any subkeys.
    
    EnableReflectionKey(key, /)
        Restores registry reflection for the specified disabled key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
        
        Will generally raise NotImplemented if executed on a 32bit OS.
        Restoring reflection for a key does not affect reflection of any
        subkeys.
    
    EnumKey(key, index, /)
        Enumerates subkeys of an open registry key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          index
            An integer that identifies the index of the key to retrieve.
        
        The function retrieves the name of one subkey each time it is called.
        It is typically called repeatedly until an OSError exception is
        raised, indicating no more values are available.
    
    EnumValue(key, index, /)
        Enumerates values of an open registry key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          index
            An integer that identifies the index of the value to retrieve.
        
        The function retrieves the name of one subkey each time it is called.
        It is typically called repeatedly, until an OSError exception
        is raised, indicating no more values.
        
        The result is a tuple of 3 items:
          value_name
            A string that identifies the value.
          value_data
            An object that holds the value data, and whose type depends
            on the underlying registry type.
          data_type
            An integer that identifies the type of the value data.
    
    ExpandEnvironmentStrings(string, /)
        Expand environment vars.
    
    FlushKey(key, /)
        Writes all the attributes of a key to the registry.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
        
        It is not necessary to call FlushKey to change a key.  Registry changes
        are flushed to disk by the registry using its lazy flusher.  Registry
        changes are also flushed to disk at system shutdown.  Unlike
        CloseKey(), the FlushKey() method returns only when all the data has
        been written to the registry.
        
        An application should only call FlushKey() if it requires absolute
        certainty that registry changes are on disk.  If you don't know whether
        a FlushKey() call is required, it probably isn't.
    
    LoadKey(key, sub_key, file_name, /)
        Insert data into the registry from a file.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          sub_key
            A string that identifies the sub-key to load.
          file_name
            The name of the file to load registry data from.  This file must
            have been created with the SaveKey() function.  Under the file
            allocation table (FAT) file system, the filename may not have an
            extension.
        
        Creates a subkey under the specified key and stores registration
        information from a specified file into that subkey.
        
        A call to LoadKey() fails if the calling process does not have the
        SE_RESTORE_PRIVILEGE privilege.
        
        If key is a handle returned by ConnectRegistry(), then the path
        specified in fileName is relative to the remote computer.
        
        The MSDN docs imply key must be in the HKEY_USER or HKEY_LOCAL_MACHINE
        tree.
    
    OpenKey(key, sub_key, reserved=0, access=131097)
        Opens the specified key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          sub_key
            A string that identifies the sub_key to open.
          reserved
            A reserved integer that must be zero.  Default is zero.
          access
            An integer that specifies an access mask that describes the desired
            security access for the key.  Default is KEY_READ.
        
        The result is a new handle to the specified key.
        If the function fails, an OSError exception is raised.
    
    OpenKeyEx(key, sub_key, reserved=0, access=131097)
        Opens the specified key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          sub_key
            A string that identifies the sub_key to open.
          reserved
            A reserved integer that must be zero.  Default is zero.
          access
            An integer that specifies an access mask that describes the desired
            security access for the key.  Default is KEY_READ.
        
        The result is a new handle to the specified key.
        If the function fails, an OSError exception is raised.
    
    QueryInfoKey(key, /)
        Returns information about a key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
        
        The result is a tuple of 3 items:
        An integer that identifies the number of sub keys this key has.
        An integer that identifies the number of values this key has.
        An integer that identifies when the key was last modified (if available)
        as 100's of nanoseconds since Jan 1, 1600.
    
    QueryReflectionKey(key, /)
        Returns the reflection state for the specified key as a bool.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
        
        Will generally raise NotImplemented if executed on a 32bit OS.
    
    QueryValue(key, sub_key, /)
        Retrieves the unnamed value for a key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          sub_key
            A string that holds the name of the subkey with which the value
            is associated.  If this parameter is None or empty, the function
            retrieves the value set by the SetValue() method for the key
            identified by key.
        
        Values in the registry have name, type, and data components. This method
        retrieves the data for a key's first value that has a NULL name.
        But since the underlying API call doesn't return the type, you'll
        probably be happier using QueryValueEx; this function is just here for
        completeness.
    
    QueryValueEx(key, name, /)
        Retrieves the type and value of a specified sub-key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          name
            A string indicating the value to query.
        
        Behaves mostly like QueryValue(), but also returns the type of the
        specified value name associated with the given open registry key.
        
        The return value is a tuple of the value and the type_id.
    
    SaveKey(key, file_name, /)
        Saves the specified key, and all its subkeys to the specified file.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          file_name
            The name of the file to save registry data to.  This file cannot
            already exist. If this filename includes an extension, it cannot be
            used on file allocation table (FAT) file systems by the LoadKey(),
            ReplaceKey() or RestoreKey() methods.
        
        If key represents a key on a remote computer, the path described by
        file_name is relative to the remote computer.
        
        The caller of this method must possess the SeBackupPrivilege
        security privilege.  This function passes NULL for security_attributes
        to the API.
    
    SetValue(key, sub_key, type, value, /)
        Associates a value with a specified key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          sub_key
            A string that names the subkey with which the value is associated.
          type
            An integer that specifies the type of the data.  Currently this must
            be REG_SZ, meaning only strings are supported.
          value
            A string that specifies the new value.
        
        If the key specified by the sub_key parameter does not exist, the
        SetValue function creates it.
        
        Value lengths are limited by available memory. Long values (more than
        2048 bytes) should be stored as files with the filenames stored in
        the configuration registry to help the registry perform efficiently.
        
        The key identified by the key parameter must have been opened with
        KEY_SET_VALUE access.
    
    SetValueEx(key, value_name, reserved, type, value, /)
        Stores data in the value field of an open registry key.
        
          key
            An already open key, or any one of the predefined HKEY_* constants.
          value_name
            A string containing the name of the value to set, or None.
          reserved
            Can be anything - zero is always passed to the API.
          type
            An integer that specifies the type of the data, one of:
            REG_BINARY -- Binary data in any form.
            REG_DWORD -- A 32-bit number.
            REG_DWORD_LITTLE_ENDIAN -- A 32-bit number in little-endian format. Equivalent to REG_DWORD
            REG_DWORD_BIG_ENDIAN -- A 32-bit number in big-endian format.
            REG_EXPAND_SZ -- A null-terminated string that contains unexpanded
                             references to environment variables (for example,
                             %PATH%).
            REG_LINK -- A Unicode symbolic link.
            REG_MULTI_SZ -- A sequence of null-terminated strings, terminated
                            by two null characters.  Note that Python handles
                            this termination automatically.
            REG_NONE -- No defined value type.
            REG_QWORD -- A 64-bit number.
            REG_QWORD_LITTLE_ENDIAN -- A 64-bit number in little-endian format. Equivalent to REG_QWORD.
            REG_RESOURCE_LIST -- A device-driver resource list.
            REG_SZ -- A null-terminated string.
          value
            A string that specifies the new value.
        
        This method can also set additional value and type information for the
        specified key.  The key identified by the key parameter must have been
        opened with KEY_SET_VALUE access.
        
        To open the key, use the CreateKeyEx() or OpenKeyEx() methods.
        
        Value lengths are limited by available memory. Long values (more than
        2048 bytes) should be stored as files with the filenames stored in
        the configuration registry to help the registry perform efficiently.

DATA
    HKEY_CLASSES_ROOT = 18446744071562067968
    HKEY_CURRENT_CONFIG = 18446744071562067973
    HKEY_CURRENT_USER = 18446744071562067969
    HKEY_DYN_DATA = 18446744071562067974
    HKEY_LOCAL_MACHINE = 18446744071562067970
    HKEY_PERFORMANCE_DATA = 18446744071562067972
    HKEY_USERS = 18446744071562067971
    KEY_ALL_ACCESS = 983103
    KEY_CREATE_LINK = 32
    KEY_CREATE_SUB_KEY = 4
    KEY_ENUMERATE_SUB_KEYS = 8
    KEY_EXECUTE = 131097
    KEY_NOTIFY = 16
    KEY_QUERY_VALUE = 1
    KEY_READ = 131097
    KEY_SET_VALUE = 2
    KEY_WOW64_32KEY = 512
    KEY_WOW64_64KEY = 256
    KEY_WRITE = 131078
    REG_BINARY = 3
    REG_CREATED_NEW_KEY = 1
    REG_DWORD = 4
    REG_DWORD_BIG_ENDIAN = 5
    REG_DWORD_LITTLE_ENDIAN = 4
    REG_EXPAND_SZ = 2
    REG_FULL_RESOURCE_DESCRIPTOR = 9
    REG_LEGAL_CHANGE_FILTER = 268435471
    REG_LEGAL_OPTION = 31
    REG_LINK = 6
    REG_MULTI_SZ = 7
    REG_NONE = 0
    REG_NOTIFY_CHANGE_ATTRIBUTES = 2
    REG_NOTIFY_CHANGE_LAST_SET = 4
    REG_NOTIFY_CHANGE_NAME = 1
    REG_NOTIFY_CHANGE_SECURITY = 8
    REG_NO_LAZY_FLUSH = 4
    REG_OPENED_EXISTING_KEY = 2
    REG_OPTION_BACKUP_RESTORE = 4
    REG_OPTION_CREATE_LINK = 2
    REG_OPTION_NON_VOLATILE = 0
    REG_OPTION_OPEN_LINK = 8
    REG_OPTION_RESERVED = 0
    REG_OPTION_VOLATILE = 1
    REG_QWORD = 11
    REG_QWORD_LITTLE_ENDIAN = 11
    REG_REFRESH_HIVE = 2
    REG_RESOURCE_LIST = 8
    REG_RESOURCE_REQUIREMENTS_LIST = 10
    REG_SZ = 1
    REG_WHOLE_HIVE_VOLATILE = 1

FILE
    (built-in)


