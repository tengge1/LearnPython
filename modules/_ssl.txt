Help on module _ssl:

NAME
    _ssl

DESCRIPTION
    Implementation module for SSL socket operations.  See the socket module
    for documentation.

CLASSES
    builtins.object
        MemoryBIO
        Session
    
    class MemoryBIO(builtins.object)
     |  Methods defined here:
     |  
     |  read(self, size=-1, /)
     |      Read up to size bytes from the memory BIO.
     |      
     |      If size is not specified, read the entire buffer.
     |      If the return value is an empty bytes instance, this means either
     |      EOF or that no data is available. Use the "eof" property to
     |      distinguish between the two.
     |  
     |  write(self, b, /)
     |      Writes the bytes b into the memory BIO.
     |      
     |      Returns the number of bytes written.
     |  
     |  write_eof(self, /)
     |      Write an EOF marker to the memory BIO.
     |      
     |      When all data has been read, the "eof" property will be True.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  eof
     |      Whether the memory BIO is at EOF.
     |  
     |  pending
     |      The number of bytes pending in the memory BIO.
    
    SSLSession = class Session(builtins.object)
     |  Methods defined here:
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  has_ticket
     |      Does the session contain a ticket?
     |  
     |  id
     |      Session id
     |  
     |  ticket_lifetime_hint
     |      Ticket life time hint.
     |  
     |  time
     |      Session creation time (seconds since epoch).
     |  
     |  timeout
     |      Session timeout (delta in seconds).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __hash__ = None

FUNCTIONS
    RAND_add(string, entropy, /)
        Mix string into the OpenSSL PRNG state.
        
        entropy (a float) is a lower bound on the entropy contained in
        string.  See RFC 4086.
    
    RAND_bytes(n, /)
        Generate n cryptographically strong pseudo-random bytes.
    
    RAND_pseudo_bytes(n, /)
        Generate n pseudo-random bytes.
        
        Return a pair (bytes, is_cryptographic).  is_cryptographic is True
        if the bytes generated are cryptographically strong.
    
    RAND_status()
        Returns 1 if the OpenSSL PRNG has been seeded with enough data and 0 if not.
        
        It is necessary to seed the PRNG with RAND_add() on some platforms before
        using the ssl() function.
    
    enum_certificates(store_name)
        Retrieve certificates from Windows' cert store.
        
        store_name may be one of 'CA', 'ROOT' or 'MY'.  The system may provide
        more cert storages, too.  The function returns a list of (bytes,
        encoding_type, trust) tuples.  The encoding_type flag can be interpreted
        with X509_ASN_ENCODING or PKCS_7_ASN_ENCODING. The trust setting is either
        a set of OIDs or the boolean True.
    
    enum_crls(store_name)
        Retrieve CRLs from Windows' cert store.
        
        store_name may be one of 'CA', 'ROOT' or 'MY'.  The system may provide
        more cert storages, too.  The function returns a list of (bytes,
        encoding_type) tuples.  The encoding_type flag can be interpreted with
        X509_ASN_ENCODING or PKCS_7_ASN_ENCODING.
    
    get_default_verify_paths()
        Return search paths and environment vars that are used by SSLContext's set_default_verify_paths() to load default CAs.
        
        The values are 'cert_file_env', 'cert_file', 'cert_dir_env', 'cert_dir'.
    
    nid2obj(nid, /)
        Lookup NID, short name, long name and OID of an ASN1_OBJECT by NID.
    
    txt2obj(txt, name=False)
        Lookup NID, short name, long name and OID of an ASN1_OBJECT.
        
        By default objects are looked up by OID. With name=True short and
        long name are also matched.

DATA
    ALERT_DESCRIPTION_ACCESS_DENIED = 49
    ALERT_DESCRIPTION_BAD_CERTIFICATE = 42
    ALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE = 114
    ALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE = 113
    ALERT_DESCRIPTION_BAD_RECORD_MAC = 20
    ALERT_DESCRIPTION_CERTIFICATE_EXPIRED = 45
    ALERT_DESCRIPTION_CERTIFICATE_REVOKED = 44
    ALERT_DESCRIPTION_CERTIFICATE_UNKNOWN = 46
    ALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE = 111
    ALERT_DESCRIPTION_CLOSE_NOTIFY = 0
    ALERT_DESCRIPTION_DECODE_ERROR = 50
    ALERT_DESCRIPTION_DECOMPRESSION_FAILURE = 30
    ALERT_DESCRIPTION_DECRYPT_ERROR = 51
    ALERT_DESCRIPTION_HANDSHAKE_FAILURE = 40
    ALERT_DESCRIPTION_ILLEGAL_PARAMETER = 47
    ALERT_DESCRIPTION_INSUFFICIENT_SECURITY = 71
    ALERT_DESCRIPTION_INTERNAL_ERROR = 80
    ALERT_DESCRIPTION_NO_RENEGOTIATION = 100
    ALERT_DESCRIPTION_PROTOCOL_VERSION = 70
    ALERT_DESCRIPTION_RECORD_OVERFLOW = 22
    ALERT_DESCRIPTION_UNEXPECTED_MESSAGE = 10
    ALERT_DESCRIPTION_UNKNOWN_CA = 48
    ALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY = 115
    ALERT_DESCRIPTION_UNRECOGNIZED_NAME = 112
    ALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE = 43
    ALERT_DESCRIPTION_UNSUPPORTED_EXTENSION = 110
    ALERT_DESCRIPTION_USER_CANCELLED = 90
    CERT_NONE = 0
    CERT_OPTIONAL = 1
    CERT_REQUIRED = 2
    HAS_ALPN = True
    HAS_ECDH = True
    HAS_NPN = False
    HAS_SNI = True
    HAS_SSLv2 = False
    HAS_SSLv3 = False
    HAS_TLS_UNIQUE = True
    HAS_TLSv1 = True
    HAS_TLSv1_1 = True
    HAS_TLSv1_2 = True
    HAS_TLSv1_3 = True
    HOSTFLAG_ALWAYS_CHECK_SUBJECT = 1
    HOSTFLAG_MULTI_LABEL_WILDCARDS = 8
    HOSTFLAG_NEVER_CHECK_SUBJECT = 32
    HOSTFLAG_NO_PARTIAL_WILDCARDS = 4
    HOSTFLAG_NO_WILDCARDS = 2
    HOSTFLAG_SINGLE_LABEL_SUBDOMAINS = 16
    OPENSSL_VERSION = 'OpenSSL 1.1.1c  28 May 2019'
    OPENSSL_VERSION_INFO = (1, 1, 1, 3, 15)
    OPENSSL_VERSION_NUMBER = 269488191
    OP_ALL = -2147483564
    OP_CIPHER_SERVER_PREFERENCE = 4194304
    OP_ENABLE_MIDDLEBOX_COMPAT = 1048576
    OP_NO_COMPRESSION = 131072
    OP_NO_RENEGOTIATION = 1073741824
    OP_NO_SSLv2 = 0
    OP_NO_SSLv3 = 33554432
    OP_NO_TICKET = 16384
    OP_NO_TLSv1 = 67108864
    OP_NO_TLSv1_1 = 268435456
    OP_NO_TLSv1_2 = 134217728
    OP_NO_TLSv1_3 = 536870912
    OP_SINGLE_DH_USE = 0
    OP_SINGLE_ECDH_USE = 0
    PROTOCOL_SSLv23 = 2
    PROTOCOL_TLS = 2
    PROTOCOL_TLS_CLIENT = 16
    PROTOCOL_TLS_SERVER = 17
    PROTOCOL_TLSv1 = 3
    PROTOCOL_TLSv1_1 = 4
    PROTOCOL_TLSv1_2 = 5
    PROTO_MAXIMUM_SUPPORTED = -1
    PROTO_MINIMUM_SUPPORTED = -2
    PROTO_SSLv3 = 768
    PROTO_TLSv1 = 769
    PROTO_TLSv1_1 = 770
    PROTO_TLSv1_2 = 771
    PROTO_TLSv1_3 = 772
    SSL_ERROR_EOF = 8
    SSL_ERROR_INVALID_ERROR_CODE = 10
    SSL_ERROR_SSL = 1
    SSL_ERROR_SYSCALL = 5
    SSL_ERROR_WANT_CONNECT = 7
    SSL_ERROR_WANT_READ = 2
    SSL_ERROR_WANT_WRITE = 3
    SSL_ERROR_WANT_X509_LOOKUP = 4
    SSL_ERROR_ZERO_RETURN = 6
    VERIFY_CRL_CHECK_CHAIN = 12
    VERIFY_CRL_CHECK_LEAF = 4
    VERIFY_DEFAULT = 0
    VERIFY_X509_STRICT = 32
    VERIFY_X509_TRUSTED_FIRST = 32768
    err_codes_to_names = {(9, 100): 'BAD_BASE64_DECODE', (9, 101): 'BAD_DE...
    err_names_to_codes = {'AKID_MISMATCH': (11, 110), 'APP_DATA_IN_HANDSHA...
    lib_codes_to_names = {9: 'PEM', 11: 'X509', 20: 'SSL'}

FILE
    c:\program files\python37\dlls\_ssl.pyd


