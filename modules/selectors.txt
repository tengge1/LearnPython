Help on module selectors:

NAME
    selectors - Selectors module.

DESCRIPTION
    This module allows high-level and efficient I/O multiplexing, built upon the
    `select` module primitives.

CLASSES
    builtins.object
        BaseSelector
    builtins.tuple(builtins.object)
        SelectorKey
    _BaseSelectorImpl(BaseSelector)
        SelectSelector
    
    class BaseSelector(builtins.object)
     |  Selector abstract base class.
     |  
     |  A selector supports registering file objects to be monitored for specific
     |  I/O events.
     |  
     |  A file object is a file descriptor or any object with a `fileno()` method.
     |  An arbitrary object can be attached to the file object, which can be used
     |  for example to store context information, a callback, etc.
     |  
     |  A selector can use various implementations (select(), poll(), epoll()...)
     |  depending on the platform. The default `Selector` class uses the most
     |  efficient implementation on the current platform.
     |  
     |  Methods defined here:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  close(self)
     |      Close the selector.
     |      
     |      This must be called to make sure that any underlying resource is freed.
     |  
     |  get_key(self, fileobj)
     |      Return the key associated to a registered file object.
     |      
     |      Returns:
     |      SelectorKey for this file object
     |  
     |  get_map(self)
     |      Return a mapping of file objects to selector keys.
     |  
     |  modify(self, fileobj, events, data=None)
     |      Change a registered file object monitored events or attached data.
     |      
     |      Parameters:
     |      fileobj -- file object or file descriptor
     |      events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)
     |      data    -- attached data
     |      
     |      Returns:
     |      SelectorKey instance
     |      
     |      Raises:
     |      Anything that unregister() or register() raises
     |  
     |  register(self, fileobj, events, data=None)
     |      Register a file object.
     |      
     |      Parameters:
     |      fileobj -- file object or file descriptor
     |      events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)
     |      data    -- attached data
     |      
     |      Returns:
     |      SelectorKey instance
     |      
     |      Raises:
     |      ValueError if events is invalid
     |      KeyError if fileobj is already registered
     |      OSError if fileobj is closed or otherwise is unacceptable to
     |              the underlying system call (if a system call is made)
     |      
     |      Note:
     |      OSError may or may not be raised
     |  
     |  select(self, timeout=None)
     |      Perform the actual selection, until some monitored file objects are
     |      ready or a timeout expires.
     |      
     |      Parameters:
     |      timeout -- if timeout > 0, this specifies the maximum wait time, in
     |                 seconds
     |                 if timeout <= 0, the select() call won't block, and will
     |                 report the currently ready file objects
     |                 if timeout is None, select() will block until a monitored
     |                 file object becomes ready
     |      
     |      Returns:
     |      list of (key, events) for ready file objects
     |      `events` is a bitwise mask of EVENT_READ|EVENT_WRITE
     |  
     |  unregister(self, fileobj)
     |      Unregister a file object.
     |      
     |      Parameters:
     |      fileobj -- file object or file descriptor
     |      
     |      Returns:
     |      SelectorKey instance
     |      
     |      Raises:
     |      KeyError if fileobj is not registered
     |      
     |      Note:
     |      If fileobj is registered but has since been closed this does
     |      *not* raise OSError (even if the wrapped syscall does)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset({'get_map', 'register', 'select', 'unr...
    
    DefaultSelector = class SelectSelector(_BaseSelectorImpl)
     |  Select-based selector.
     |  
     |  Method resolution order:
     |      SelectSelector
     |      _BaseSelectorImpl
     |      BaseSelector
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  register(self, fileobj, events, data=None)
     |      Register a file object.
     |      
     |      Parameters:
     |      fileobj -- file object or file descriptor
     |      events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)
     |      data    -- attached data
     |      
     |      Returns:
     |      SelectorKey instance
     |      
     |      Raises:
     |      ValueError if events is invalid
     |      KeyError if fileobj is already registered
     |      OSError if fileobj is closed or otherwise is unacceptable to
     |              the underlying system call (if a system call is made)
     |      
     |      Note:
     |      OSError may or may not be raised
     |  
     |  select(self, timeout=None)
     |      Perform the actual selection, until some monitored file objects are
     |      ready or a timeout expires.
     |      
     |      Parameters:
     |      timeout -- if timeout > 0, this specifies the maximum wait time, in
     |                 seconds
     |                 if timeout <= 0, the select() call won't block, and will
     |                 report the currently ready file objects
     |                 if timeout is None, select() will block until a monitored
     |                 file object becomes ready
     |      
     |      Returns:
     |      list of (key, events) for ready file objects
     |      `events` is a bitwise mask of EVENT_READ|EVENT_WRITE
     |  
     |  unregister(self, fileobj)
     |      Unregister a file object.
     |      
     |      Parameters:
     |      fileobj -- file object or file descriptor
     |      
     |      Returns:
     |      SelectorKey instance
     |      
     |      Raises:
     |      KeyError if fileobj is not registered
     |      
     |      Note:
     |      If fileobj is registered but has since been closed this does
     |      *not* raise OSError (even if the wrapped syscall does)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _BaseSelectorImpl:
     |  
     |  close(self)
     |      Close the selector.
     |      
     |      This must be called to make sure that any underlying resource is freed.
     |  
     |  get_map(self)
     |      Return a mapping of file objects to selector keys.
     |  
     |  modify(self, fileobj, events, data=None)
     |      Change a registered file object monitored events or attached data.
     |      
     |      Parameters:
     |      fileobj -- file object or file descriptor
     |      events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)
     |      data    -- attached data
     |      
     |      Returns:
     |      SelectorKey instance
     |      
     |      Raises:
     |      Anything that unregister() or register() raises
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseSelector:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  get_key(self, fileobj)
     |      Return the key associated to a registered file object.
     |      
     |      Returns:
     |      SelectorKey for this file object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseSelector:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SelectSelector(_BaseSelectorImpl)
     |  Select-based selector.
     |  
     |  Method resolution order:
     |      SelectSelector
     |      _BaseSelectorImpl
     |      BaseSelector
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  register(self, fileobj, events, data=None)
     |      Register a file object.
     |      
     |      Parameters:
     |      fileobj -- file object or file descriptor
     |      events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)
     |      data    -- attached data
     |      
     |      Returns:
     |      SelectorKey instance
     |      
     |      Raises:
     |      ValueError if events is invalid
     |      KeyError if fileobj is already registered
     |      OSError if fileobj is closed or otherwise is unacceptable to
     |              the underlying system call (if a system call is made)
     |      
     |      Note:
     |      OSError may or may not be raised
     |  
     |  select(self, timeout=None)
     |      Perform the actual selection, until some monitored file objects are
     |      ready or a timeout expires.
     |      
     |      Parameters:
     |      timeout -- if timeout > 0, this specifies the maximum wait time, in
     |                 seconds
     |                 if timeout <= 0, the select() call won't block, and will
     |                 report the currently ready file objects
     |                 if timeout is None, select() will block until a monitored
     |                 file object becomes ready
     |      
     |      Returns:
     |      list of (key, events) for ready file objects
     |      `events` is a bitwise mask of EVENT_READ|EVENT_WRITE
     |  
     |  unregister(self, fileobj)
     |      Unregister a file object.
     |      
     |      Parameters:
     |      fileobj -- file object or file descriptor
     |      
     |      Returns:
     |      SelectorKey instance
     |      
     |      Raises:
     |      KeyError if fileobj is not registered
     |      
     |      Note:
     |      If fileobj is registered but has since been closed this does
     |      *not* raise OSError (even if the wrapped syscall does)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __abstractmethods__ = frozenset()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _BaseSelectorImpl:
     |  
     |  close(self)
     |      Close the selector.
     |      
     |      This must be called to make sure that any underlying resource is freed.
     |  
     |  get_map(self)
     |      Return a mapping of file objects to selector keys.
     |  
     |  modify(self, fileobj, events, data=None)
     |      Change a registered file object monitored events or attached data.
     |      
     |      Parameters:
     |      fileobj -- file object or file descriptor
     |      events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)
     |      data    -- attached data
     |      
     |      Returns:
     |      SelectorKey instance
     |      
     |      Raises:
     |      Anything that unregister() or register() raises
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseSelector:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  get_key(self, fileobj)
     |      Return the key associated to a registered file object.
     |      
     |      Returns:
     |      SelectorKey for this file object
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseSelector:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SelectorKey(builtins.tuple)
     |  SelectorKey(fileobj, fd, events, data)
     |  
     |  SelectorKey(fileobj, fd, events, data)
     |  
     |  Object used to associate a file object to its backing
     |  file descriptor, selected event mask, and attached data.
     |  
     |  Method resolution order:
     |      SelectorKey
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |  
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |  
     |  _asdict(self)
     |      Return a new OrderedDict which maps field names to their values.
     |  
     |  _replace(_self, **kwds)
     |      Return a new SelectorKey object replacing specified fields with new values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  _make(iterable) from builtins.type
     |      Make a new SelectorKey object from a sequence or iterable
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(_cls, fileobj, fd, events, data)
     |      Create new instance of SelectorKey(fileobj, fd, events, data)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  fileobj
     |      File object registered.
     |  
     |  fd
     |      Underlying file descriptor.
     |  
     |  events
     |      Events that must be waited for on this file object.
     |  
     |  data
     |      Optional opaque data associated to this file object.
     |      For example, this could be used to store a per-client session ID.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  _field_defaults = {}
     |  
     |  _fields = ('fileobj', 'fd', 'events', 'data')
     |  
     |  _fields_defaults = {}
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.

DATA
    EVENT_READ = 1
    EVENT_WRITE = 2

FILE
    c:\program files\python37\lib\selectors.py


