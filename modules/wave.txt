Help on module wave:

NAME
    wave - Stuff to parse WAVE files.

DESCRIPTION
    Usage.
    
    Reading WAVE files:
          f = wave.open(file, 'r')
    where file is either the name of a file or an open file pointer.
    The open file pointer must have methods read(), seek(), and close().
    When the setpos() and rewind() methods are not used, the seek()
    method is not  necessary.
    
    This returns an instance of a class with the following public methods:
          getnchannels()  -- returns number of audio channels (1 for
                             mono, 2 for stereo)
          getsampwidth()  -- returns sample width in bytes
          getframerate()  -- returns sampling frequency
          getnframes()    -- returns number of audio frames
          getcomptype()   -- returns compression type ('NONE' for linear samples)
          getcompname()   -- returns human-readable version of
                             compression type ('not compressed' linear samples)
          getparams()     -- returns a namedtuple consisting of all of the
                             above in the above order
          getmarkers()    -- returns None (for compatibility with the
                             aifc module)
          getmark(id)     -- raises an error since the mark does not
                             exist (for compatibility with the aifc module)
          readframes(n)   -- returns at most n frames of audio
          rewind()        -- rewind to the beginning of the audio stream
          setpos(pos)     -- seek to the specified position
          tell()          -- return the current position
          close()         -- close the instance (make it unusable)
    The position returned by tell() and the position given to setpos()
    are compatible and have nothing to do with the actual position in the
    file.
    The close() method is called automatically when the class instance
    is destroyed.
    
    Writing WAVE files:
          f = wave.open(file, 'w')
    where file is either the name of a file or an open file pointer.
    The open file pointer must have methods write(), tell(), seek(), and
    close().
    
    This returns an instance of a class with the following public methods:
          setnchannels(n) -- set the number of channels
          setsampwidth(n) -- set the sample width
          setframerate(n) -- set the frame rate
          setnframes(n)   -- set the number of frames
          setcomptype(type, name)
                          -- set the compression type and the
                             human-readable compression type
          setparams(tuple)
                          -- set all parameters at once
          tell()          -- return current position in output file
          writeframesraw(data)
                          -- write audio frames without pathing up the
                             file header
          writeframes(data)
                          -- write audio frames and patch up the file header
          close()         -- patch up the file header and close the
                             output file
    You should set the parameters before the first writeframesraw or
    writeframes.  The total number of frames does not need to be set,
    but when it is set to the correct value, the header does not have to
    be patched up.
    It is best to first set all parameters, perhaps possibly the
    compression type, and then write audio frames using writeframesraw.
    When all frames have been written, either call writeframes(b'') or
    close() to patch up the sizes in the header.
    The close() method is called automatically when the class instance
    is destroyed.

CLASSES
    builtins.Exception(builtins.BaseException)
        Error
    builtins.object
        Wave_read
        Wave_write
    
    class Error(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      Error
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class Wave_read(builtins.object)
     |  Wave_read(f)
     |  
     |  Variables used in this class:
     |  
     |  These variables are available to the user though appropriate
     |  methods of this class:
     |  _file -- the open file with methods read(), close(), and seek()
     |            set through the __init__() method
     |  _nchannels -- the number of audio channels
     |            available through the getnchannels() method
     |  _nframes -- the number of audio frames
     |            available through the getnframes() method
     |  _sampwidth -- the number of bytes per audio sample
     |            available through the getsampwidth() method
     |  _framerate -- the sampling frequency
     |            available through the getframerate() method
     |  _comptype -- the AIFF-C compression type ('NONE' if AIFF)
     |            available through the getcomptype() method
     |  _compname -- the human-readable AIFF-C compression type
     |            available through the getcomptype() method
     |  _soundpos -- the position in the audio stream
     |            available through the tell() method, set through the
     |            setpos() method
     |  
     |  These variables are used internally only:
     |  _fmt_chunk_read -- 1 iff the FMT chunk has been read
     |  _data_seek_needed -- 1 iff positioned correctly in audio
     |            file for readframes()
     |  _data_chunk -- instantiation of a chunk class for the DATA chunk
     |  _framesize -- size of one frame in the file
     |  
     |  Methods defined here:
     |  
     |  __del__(self)
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  __init__(self, f)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  close(self)
     |  
     |  getcompname(self)
     |  
     |  getcomptype(self)
     |  
     |  getfp(self)
     |      # User visible methods.
     |  
     |  getframerate(self)
     |  
     |  getmark(self, id)
     |  
     |  getmarkers(self)
     |  
     |  getnchannels(self)
     |  
     |  getnframes(self)
     |  
     |  getparams(self)
     |  
     |  getsampwidth(self)
     |  
     |  initfp(self, file)
     |  
     |  readframes(self, nframes)
     |  
     |  rewind(self)
     |  
     |  setpos(self, pos)
     |  
     |  tell(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Wave_write(builtins.object)
     |  Wave_write(f)
     |  
     |  Variables used in this class:
     |  
     |  These variables are user settable through appropriate methods
     |  of this class:
     |  _file -- the open file with methods write(), close(), tell(), seek()
     |            set through the __init__() method
     |  _comptype -- the AIFF-C compression type ('NONE' in AIFF)
     |            set through the setcomptype() or setparams() method
     |  _compname -- the human-readable AIFF-C compression type
     |            set through the setcomptype() or setparams() method
     |  _nchannels -- the number of audio channels
     |            set through the setnchannels() or setparams() method
     |  _sampwidth -- the number of bytes per audio sample
     |            set through the setsampwidth() or setparams() method
     |  _framerate -- the sampling frequency
     |            set through the setframerate() or setparams() method
     |  _nframes -- the number of audio frames written to the header
     |            set through the setnframes() or setparams() method
     |  
     |  These variables are used internally only:
     |  _datalength -- the size of the audio samples written to the header
     |  _nframeswritten -- the number of frames actually written
     |  _datawritten -- the size of the audio samples actually written
     |  
     |  Methods defined here:
     |  
     |  __del__(self)
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  __init__(self, f)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  close(self)
     |  
     |  getcompname(self)
     |  
     |  getcomptype(self)
     |  
     |  getframerate(self)
     |  
     |  getmark(self, id)
     |  
     |  getmarkers(self)
     |  
     |  getnchannels(self)
     |  
     |  getnframes(self)
     |  
     |  getparams(self)
     |  
     |  getsampwidth(self)
     |  
     |  initfp(self, file)
     |  
     |  setcomptype(self, comptype, compname)
     |  
     |  setframerate(self, framerate)
     |  
     |  setmark(self, id, pos, name)
     |  
     |  setnchannels(self, nchannels)
     |      # User visible methods.
     |  
     |  setnframes(self, nframes)
     |  
     |  setparams(self, params)
     |  
     |  setsampwidth(self, sampwidth)
     |  
     |  tell(self)
     |  
     |  writeframes(self, data)
     |  
     |  writeframesraw(self, data)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    open(f, mode=None)
    
    openfp(f, mode=None)

DATA
    __all__ = ['open', 'openfp', 'Error', 'Wave_read', 'Wave_write']

FILE
    c:\program files\python37\lib\wave.py


