Help on module __future__:

NAME
    __future__ - Record of phased-in incompatible language changes.

DESCRIPTION
    Each line is of the form:
    
        FeatureName = "_Feature(" OptionalRelease "," MandatoryRelease ","
                                  CompilerFlag ")"
    
    where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
    of the same form as sys.version_info:
    
        (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
         PY_MINOR_VERSION, # the 1; an int
         PY_MICRO_VERSION, # the 0; an int
         PY_RELEASE_LEVEL, # "alpha", "beta", "candidate" or "final"; string
         PY_RELEASE_SERIAL # the 3; an int
        )
    
    OptionalRelease records the first release in which
    
        from __future__ import FeatureName
    
    was accepted.
    
    In the case of MandatoryReleases that have not yet occurred,
    MandatoryRelease predicts the release in which the feature will become part
    of the language.
    
    Else MandatoryRelease records when the feature became part of the language;
    in releases at or after that, modules no longer need
    
        from __future__ import FeatureName
    
    to use the feature in question, but may continue to use such imports.
    
    MandatoryRelease may also be None, meaning that a planned feature got
    dropped.
    
    Instances of class _Feature have two corresponding methods,
    .getOptionalRelease() and .getMandatoryRelease().
    
    CompilerFlag is the (bitfield) flag that should be passed in the fourth
    argument to the builtin function compile() to enable the feature in
    dynamically compiled code.  This flag is stored in the .compiler_flag
    attribute on _Future instances.  These values must match the appropriate
    #defines of CO_xxx flags in Include/compile.h.
    
    No feature line is ever to be deleted from this file.

DATA
    __all__ = ['all_feature_names', 'nested_scopes', 'generators', 'divisi...
    absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0...
    all_feature_names = ['nested_scopes', 'generators', 'division', 'absol...
    annotations = _Feature((3, 7, 0, 'beta', 1), (4, 0, 0, 'alpha', 0), 10...
    barry_as_FLUFL = _Feature((3, 1, 0, 'alpha', 2), (3, 9, 0, 'alpha', 0)...
    division = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192...
    generator_stop = _Feature((3, 5, 0, 'beta', 1), (3, 7, 0, 'alpha', 0),...
    generators = _Feature((2, 2, 0, 'alpha', 1), (2, 3, 0, 'final', 0), 0)
    nested_scopes = _Feature((2, 1, 0, 'beta', 1), (2, 2, 0, 'alpha', 0), ...
    print_function = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0)...
    unicode_literals = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', ...
    with_statement = _Feature((2, 5, 0, 'alpha', 1), (2, 6, 0, 'alpha', 0)...

FILE
    c:\program files\python37\lib\__future__.py


