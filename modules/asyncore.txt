Help on module asyncore:

NAME
    asyncore - Basic infrastructure for asynchronous socket service clients and servers.

DESCRIPTION
    There are only two ways to have a program on a single processor do "more
    than one thing at a time".  Multi-threaded programming is the simplest and
    most popular way to do it, but there is another very different technique,
    that lets you have nearly all the advantages of multi-threading, without
    actually using multiple threads. it's really only practical if your program
    is largely I/O bound. If your program is CPU bound, then pre-emptive
    scheduled threads are probably what you really need. Network servers are
    rarely CPU-bound, however.
    
    If your operating system supports the select() system call in its I/O
    library (and nearly all do), then you can use it to juggle multiple
    communication channels at once; doing other work while your I/O is taking
    place in the "background."  Although this strategy can seem strange and
    complex, especially at first, it is in many ways easier to understand and
    control than multi-threaded programming. The module documented here solves
    many of the difficult problems for you, making the task of building
    sophisticated high-performance network servers and clients a snap.

CLASSES
    builtins.Exception(builtins.BaseException)
        ExitNow
    builtins.object
        dispatcher
            dispatcher_with_send
    
    class ExitNow(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      ExitNow
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args
    
    class dispatcher(builtins.object)
     |  dispatcher(sock=None, map=None)
     |  
     |  Methods defined here:
     |  
     |  __init__(self, sock=None, map=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__ = __repr__(self)
     |  
     |  accept(self)
     |  
     |  add_channel(self, map=None)
     |  
     |  bind(self, addr)
     |  
     |  close(self)
     |  
     |  connect(self, address)
     |  
     |  create_socket(self, family=<AddressFamily.AF_INET: 2>, type=<SocketKind.SOCK_STREAM: 1>)
     |  
     |  del_channel(self, map=None)
     |  
     |  handle_accept(self)
     |  
     |  handle_accepted(self, sock, addr)
     |  
     |  handle_close(self)
     |  
     |  handle_connect(self)
     |  
     |  handle_connect_event(self)
     |  
     |  handle_error(self)
     |  
     |  handle_expt(self)
     |  
     |  handle_expt_event(self)
     |  
     |  handle_read(self)
     |  
     |  handle_read_event(self)
     |  
     |  handle_write(self)
     |  
     |  handle_write_event(self)
     |  
     |  listen(self, num)
     |  
     |  log(self, message)
     |  
     |  log_info(self, message, type='info')
     |  
     |  readable(self)
     |  
     |  recv(self, buffer_size)
     |  
     |  send(self, data)
     |  
     |  set_reuse_addr(self)
     |  
     |  set_socket(self, sock, map=None)
     |  
     |  writable(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  accepting = False
     |  
     |  addr = None
     |  
     |  closing = False
     |  
     |  connected = False
     |  
     |  connecting = False
     |  
     |  debug = False
     |  
     |  ignore_log_types = frozenset({'warning'})
    
    class dispatcher_with_send(dispatcher)
     |  dispatcher_with_send(sock=None, map=None)
     |  
     |  Method resolution order:
     |      dispatcher_with_send
     |      dispatcher
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, sock=None, map=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  handle_write(self)
     |  
     |  initiate_send(self)
     |  
     |  send(self, data)
     |  
     |  writable(self)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from dispatcher:
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __str__ = __repr__(self)
     |  
     |  accept(self)
     |  
     |  add_channel(self, map=None)
     |  
     |  bind(self, addr)
     |  
     |  close(self)
     |  
     |  connect(self, address)
     |  
     |  create_socket(self, family=<AddressFamily.AF_INET: 2>, type=<SocketKind.SOCK_STREAM: 1>)
     |  
     |  del_channel(self, map=None)
     |  
     |  handle_accept(self)
     |  
     |  handle_accepted(self, sock, addr)
     |  
     |  handle_close(self)
     |  
     |  handle_connect(self)
     |  
     |  handle_connect_event(self)
     |  
     |  handle_error(self)
     |  
     |  handle_expt(self)
     |  
     |  handle_expt_event(self)
     |  
     |  handle_read(self)
     |  
     |  handle_read_event(self)
     |  
     |  handle_write_event(self)
     |  
     |  listen(self, num)
     |  
     |  log(self, message)
     |  
     |  log_info(self, message, type='info')
     |  
     |  readable(self)
     |  
     |  recv(self, buffer_size)
     |  
     |  set_reuse_addr(self)
     |  
     |  set_socket(self, sock, map=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from dispatcher:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from dispatcher:
     |  
     |  accepting = False
     |  
     |  addr = None
     |  
     |  closing = False
     |  
     |  connected = False
     |  
     |  connecting = False
     |  
     |  debug = False
     |  
     |  ignore_log_types = frozenset({'warning'})

FUNCTIONS
    close_all(map=None, ignore_all=False)
    
    compact_traceback()
    
    loop(timeout=30.0, use_poll=False, map=None, count=None)
    
    poll(timeout=0.0, map=None)
    
    poll2(timeout=0.0, map=None)
    
    poll3 = poll2(timeout=0.0, map=None)
    
    read(obj)
    
    readwrite(obj, flags)
    
    write(obj)

DATA
    EAGAIN = 11
    EALREADY = 10037
    EBADF = 9
    ECONNABORTED = 10053
    ECONNRESET = 10054
    EINPROGRESS = 10036
    EINVAL = 22
    EISCONN = 10056
    ENOTCONN = 10057
    EPIPE = 32
    ESHUTDOWN = 10058
    EWOULDBLOCK = 10035
    errorcode = {1: 'EPERM', 2: 'ENOENT', 3: 'ESRCH', 4: 'EINTR', 5: 'EIO'...
    socket_map = {}

FILE
    c:\program files\python37\lib\asyncore.py


