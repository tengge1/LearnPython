Help on module sre_parse:

NAME
    sre_parse - Internal support module for sre

CLASSES
    builtins.Exception(builtins.BaseException)
        Verbose
    builtins.object
        Pattern
        SubPattern
        Tokenizer
    
    class Pattern(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  checkgroup(self, gid)
     |  
     |  checklookbehindgroup(self, gid, source)
     |  
     |  closegroup(self, gid, p)
     |  
     |  opengroup(self, name=None)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  groups
    
    class SubPattern(builtins.object)
     |  SubPattern(pattern, data=None)
     |  
     |  Methods defined here:
     |  
     |  __delitem__(self, index)
     |  
     |  __getitem__(self, index)
     |  
     |  __init__(self, pattern, data=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __len__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  __setitem__(self, index, code)
     |  
     |  append(self, code)
     |  
     |  dump(self, level=0)
     |  
     |  getwidth(self)
     |  
     |  insert(self, index, code)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Tokenizer(builtins.object)
     |  Tokenizer(string)
     |  
     |  Methods defined here:
     |  
     |  __init__(self, string)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  error(self, msg, offset=0)
     |  
     |  get(self)
     |  
     |  getuntil(self, terminator)
     |  
     |  getwhile(self, n, charset)
     |  
     |  match(self, char)
     |  
     |  seek(self, index)
     |  
     |  tell(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  pos
    
    class Verbose(builtins.Exception)
     |  Common base class for all non-exit exceptions.
     |  
     |  Method resolution order:
     |      Verbose
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args

FUNCTIONS
    expand_template(template, match)
    
    fix_flags(src, flags)
    
    parse(str, flags=0, pattern=None)
    
    parse_template(source, pattern)

DATA
    ANY = ANY
    ANY_ALL = ANY_ALL
    ASCIILETTERS = frozenset({'A', 'B', 'C', 'D', 'E', 'F', ...})
    ASSERT = ASSERT
    ASSERT_NOT = ASSERT_NOT
    AT = AT
    ATCODES = [AT_BEGINNING, AT_BEGINNING_LINE, AT_BEGINNING_STRING, AT_BO...
    AT_BEGINNING = AT_BEGINNING
    AT_BEGINNING_LINE = AT_BEGINNING_LINE
    AT_BEGINNING_STRING = AT_BEGINNING_STRING
    AT_BOUNDARY = AT_BOUNDARY
    AT_END = AT_END
    AT_END_LINE = AT_END_LINE
    AT_END_STRING = AT_END_STRING
    AT_LOCALE = {AT_BOUNDARY: AT_LOC_BOUNDARY, AT_NON_BOUNDARY: AT_LOC_NON...
    AT_LOC_BOUNDARY = AT_LOC_BOUNDARY
    AT_LOC_NON_BOUNDARY = AT_LOC_NON_BOUNDARY
    AT_MULTILINE = {AT_BEGINNING: AT_BEGINNING_LINE, AT_END: AT_END_LINE}
    AT_NON_BOUNDARY = AT_NON_BOUNDARY
    AT_UNICODE = {AT_BOUNDARY: AT_UNI_BOUNDARY, AT_NON_BOUNDARY: AT_UNI_NO...
    AT_UNI_BOUNDARY = AT_UNI_BOUNDARY
    AT_UNI_NON_BOUNDARY = AT_UNI_NON_BOUNDARY
    BIGCHARSET = BIGCHARSET
    BRANCH = BRANCH
    CALL = CALL
    CATEGORIES = {r'\A': (AT, AT_BEGINNING_STRING), r'\B': (AT, AT_NON_BOU...
    CATEGORY = CATEGORY
    CATEGORY_DIGIT = CATEGORY_DIGIT
    CATEGORY_LINEBREAK = CATEGORY_LINEBREAK
    CATEGORY_LOC_NOT_WORD = CATEGORY_LOC_NOT_WORD
    CATEGORY_LOC_WORD = CATEGORY_LOC_WORD
    CATEGORY_NOT_DIGIT = CATEGORY_NOT_DIGIT
    CATEGORY_NOT_LINEBREAK = CATEGORY_NOT_LINEBREAK
    CATEGORY_NOT_SPACE = CATEGORY_NOT_SPACE
    CATEGORY_NOT_WORD = CATEGORY_NOT_WORD
    CATEGORY_SPACE = CATEGORY_SPACE
    CATEGORY_UNI_DIGIT = CATEGORY_UNI_DIGIT
    CATEGORY_UNI_LINEBREAK = CATEGORY_UNI_LINEBREAK
    CATEGORY_UNI_NOT_DIGIT = CATEGORY_UNI_NOT_DIGIT
    CATEGORY_UNI_NOT_LINEBREAK = CATEGORY_UNI_NOT_LINEBREAK
    CATEGORY_UNI_NOT_SPACE = CATEGORY_UNI_NOT_SPACE
    CATEGORY_UNI_NOT_WORD = CATEGORY_UNI_NOT_WORD
    CATEGORY_UNI_SPACE = CATEGORY_UNI_SPACE
    CATEGORY_UNI_WORD = CATEGORY_UNI_WORD
    CATEGORY_WORD = CATEGORY_WORD
    CHARSET = CHARSET
    CHCODES = [CATEGORY_DIGIT, CATEGORY_NOT_DIGIT, CATEGORY_SPACE, CATEGOR...
    CH_LOCALE = {CATEGORY_DIGIT: CATEGORY_DIGIT, CATEGORY_NOT_DIGIT: CATEG...
    CH_UNICODE = {CATEGORY_DIGIT: CATEGORY_UNI_DIGIT, CATEGORY_NOT_DIGIT: ...
    DIGITS = frozenset({'0', '1', '2', '3', '4', '5', ...})
    ESCAPES = {r'\\': (LITERAL, 92), r'\a': (LITERAL, 7), r'\b': (LITERAL,...
    FAILURE = FAILURE
    FLAGS = {'L': 4, 'a': 256, 'i': 2, 'm': 8, 's': 16, 't': 1, 'u': 32, '...
    GLOBAL_FLAGS = 129
    GROUPREF = GROUPREF
    GROUPREF_EXISTS = GROUPREF_EXISTS
    GROUPREF_IGNORE = GROUPREF_IGNORE
    GROUPREF_LOC_IGNORE = GROUPREF_LOC_IGNORE
    GROUPREF_UNI_IGNORE = GROUPREF_UNI_IGNORE
    HEXDIGITS = frozenset({'0', '1', '2', '3', '4', '5', ...})
    IN = IN
    INFO = INFO
    IN_IGNORE = IN_IGNORE
    IN_LOC_IGNORE = IN_LOC_IGNORE
    IN_UNI_IGNORE = IN_UNI_IGNORE
    JUMP = JUMP
    LITERAL = LITERAL
    LITERAL_IGNORE = LITERAL_IGNORE
    LITERAL_LOC_IGNORE = LITERAL_LOC_IGNORE
    LITERAL_UNI_IGNORE = LITERAL_UNI_IGNORE
    MAGIC = 20171005
    MARK = MARK
    MAXGROUPS = 2147483647
    MAXREPEAT = MAXREPEAT
    MAX_REPEAT = MAX_REPEAT
    MAX_UNTIL = MAX_UNTIL
    MIN_REPEAT = MIN_REPEAT
    MIN_REPEAT_ONE = MIN_REPEAT_ONE
    MIN_UNTIL = MIN_UNTIL
    NEGATE = NEGATE
    NOT_LITERAL = NOT_LITERAL
    NOT_LITERAL_IGNORE = NOT_LITERAL_IGNORE
    NOT_LITERAL_LOC_IGNORE = NOT_LITERAL_LOC_IGNORE
    NOT_LITERAL_UNI_IGNORE = NOT_LITERAL_UNI_IGNORE
    OCTDIGITS = frozenset({'0', '1', '2', '3', '4', '5', ...})
    OPCODES = [FAILURE, SUCCESS, ANY, ANY_ALL, ASSERT, ASSERT_NOT, AT, BRA...
    OP_IGNORE = {LITERAL: LITERAL_IGNORE, NOT_LITERAL: NOT_LITERAL_IGNORE}
    OP_LOCALE_IGNORE = {LITERAL: LITERAL_LOC_IGNORE, NOT_LITERAL: NOT_LITE...
    OP_UNICODE_IGNORE = {LITERAL: LITERAL_UNI_IGNORE, NOT_LITERAL: NOT_LIT...
    RANGE = RANGE
    RANGE_UNI_IGNORE = RANGE_UNI_IGNORE
    REPEAT = REPEAT
    REPEAT_CHARS = '*+?{'
    REPEAT_ONE = REPEAT_ONE
    SPECIAL_CHARS = r'.\[{()*+?^$|'
    SRE_FLAG_ASCII = 256
    SRE_FLAG_DEBUG = 128
    SRE_FLAG_DOTALL = 16
    SRE_FLAG_IGNORECASE = 2
    SRE_FLAG_LOCALE = 4
    SRE_FLAG_MULTILINE = 8
    SRE_FLAG_TEMPLATE = 1
    SRE_FLAG_UNICODE = 32
    SRE_FLAG_VERBOSE = 64
    SRE_INFO_CHARSET = 4
    SRE_INFO_LITERAL = 2
    SRE_INFO_PREFIX = 1
    SUBPATTERN = SUBPATTERN
    SUCCESS = SUCCESS
    TYPE_FLAGS = 292
    WHITESPACE = frozenset({'\t', '\n', '\x0b', '\x0c', '\r', ' '})

FILE
    c:\program files\python37\lib\sre_parse.py


