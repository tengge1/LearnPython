Help on module pycodestyle:

NAME
    pycodestyle - Check Python source code formatting, according to PEP 8.

DESCRIPTION
    For usage and a list of options, try this:
    $ python pycodestyle.py -h
    
    This program and its regression test suite live here:
    https://github.com/pycqa/pycodestyle
    
    Groups of errors and warnings:
    E errors
    W warnings
    100 indentation
    200 whitespace
    300 blank lines
    400 imports
    500 line length
    600 deprecation
    700 statements
    900 syntax error

CLASSES
    builtins.object
        BaseReport
            FileReport
            StandardReport
                DiffReport
        Checker
        StyleGuide
    
    class BaseReport(builtins.object)
     |  BaseReport(options)
     |  
     |  Collect the results of the checks.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, options)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  error(self, line_number, offset, text, check)
     |      Report an error, according to options.
     |  
     |  get_count(self, prefix='')
     |      Return the total count of errors and warnings.
     |  
     |  get_file_results(self)
     |      Return the count of errors and warnings for this file.
     |  
     |  get_statistics(self, prefix='')
     |      Get statistics for message codes that start with the prefix.
     |      
     |      prefix='' matches all errors and warnings
     |      prefix='E' matches all errors
     |      prefix='W' matches all warnings
     |      prefix='E4' matches all errors that have to do with imports
     |  
     |  increment_logical_line(self)
     |      Signal a new logical line.
     |  
     |  init_file(self, filename, lines, expected, line_offset)
     |      Signal a new file.
     |  
     |  print_benchmark(self)
     |      Print benchmark numbers.
     |  
     |  print_statistics(self, prefix='')
     |      Print overall statistics (number of errors and warnings).
     |  
     |  start(self)
     |      Start the timer.
     |  
     |  stop(self)
     |      Stop the timer.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  print_filename = False
    
    class Checker(builtins.object)
     |  Checker(filename=None, lines=None, options=None, report=None, **kwargs)
     |  
     |  Load a Python source file, tokenize it, check coding style.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, filename=None, lines=None, options=None, report=None, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  build_tokens_line(self)
     |      Build a logical line from tokens.
     |  
     |  check_all(self, expected=None, line_offset=0)
     |      Run all checks on the input file.
     |  
     |  check_ast(self)
     |      Build the file's AST and run all AST checks.
     |  
     |  check_logical(self)
     |      Build a line from tokens and run all logical checks on it.
     |  
     |  check_physical(self, line)
     |      Run all physical checks on a raw input line.
     |  
     |  generate_tokens(self)
     |      Tokenize file, run physical line checks and yield tokens.
     |  
     |  init_checker_state(self, name, argument_names)
     |      Prepare custom state for the specific checker plugin.
     |  
     |  maybe_check_physical(self, token)
     |      If appropriate for token, check current physical line(s).
     |  
     |  readline(self)
     |      Get the next line from the input buffer.
     |  
     |  report_invalid_syntax(self)
     |      Check if the syntax is valid.
     |  
     |  run_check(self, check, argument_names)
     |      Run a check plugin.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class DiffReport(StandardReport)
     |  DiffReport(options)
     |  
     |  Collect and print the results for the changed lines only.
     |  
     |  Method resolution order:
     |      DiffReport
     |      StandardReport
     |      BaseReport
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, options)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  error(self, line_number, offset, text, check)
     |      Report an error, according to options.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from StandardReport:
     |  
     |  get_file_results(self)
     |      Print results and return the overall count for this file.
     |  
     |  init_file(self, filename, lines, expected, line_offset)
     |      Signal a new file.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseReport:
     |  
     |  get_count(self, prefix='')
     |      Return the total count of errors and warnings.
     |  
     |  get_statistics(self, prefix='')
     |      Get statistics for message codes that start with the prefix.
     |      
     |      prefix='' matches all errors and warnings
     |      prefix='E' matches all errors
     |      prefix='W' matches all warnings
     |      prefix='E4' matches all errors that have to do with imports
     |  
     |  increment_logical_line(self)
     |      Signal a new logical line.
     |  
     |  print_benchmark(self)
     |      Print benchmark numbers.
     |  
     |  print_statistics(self, prefix='')
     |      Print overall statistics (number of errors and warnings).
     |  
     |  start(self)
     |      Start the timer.
     |  
     |  stop(self)
     |      Stop the timer.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseReport:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseReport:
     |  
     |  print_filename = False
    
    class FileReport(BaseReport)
     |  FileReport(options)
     |  
     |  Collect the results of the checks and print the filenames.
     |  
     |  Method resolution order:
     |      FileReport
     |      BaseReport
     |      builtins.object
     |  
     |  Data and other attributes defined here:
     |  
     |  print_filename = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseReport:
     |  
     |  __init__(self, options)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  error(self, line_number, offset, text, check)
     |      Report an error, according to options.
     |  
     |  get_count(self, prefix='')
     |      Return the total count of errors and warnings.
     |  
     |  get_file_results(self)
     |      Return the count of errors and warnings for this file.
     |  
     |  get_statistics(self, prefix='')
     |      Get statistics for message codes that start with the prefix.
     |      
     |      prefix='' matches all errors and warnings
     |      prefix='E' matches all errors
     |      prefix='W' matches all warnings
     |      prefix='E4' matches all errors that have to do with imports
     |  
     |  increment_logical_line(self)
     |      Signal a new logical line.
     |  
     |  init_file(self, filename, lines, expected, line_offset)
     |      Signal a new file.
     |  
     |  print_benchmark(self)
     |      Print benchmark numbers.
     |  
     |  print_statistics(self, prefix='')
     |      Print overall statistics (number of errors and warnings).
     |  
     |  start(self)
     |      Start the timer.
     |  
     |  stop(self)
     |      Stop the timer.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseReport:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class StandardReport(BaseReport)
     |  StandardReport(options)
     |  
     |  Collect and print the results of the checks.
     |  
     |  Method resolution order:
     |      StandardReport
     |      BaseReport
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, options)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  error(self, line_number, offset, text, check)
     |      Report an error, according to options.
     |  
     |  get_file_results(self)
     |      Print results and return the overall count for this file.
     |  
     |  init_file(self, filename, lines, expected, line_offset)
     |      Signal a new file.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from BaseReport:
     |  
     |  get_count(self, prefix='')
     |      Return the total count of errors and warnings.
     |  
     |  get_statistics(self, prefix='')
     |      Get statistics for message codes that start with the prefix.
     |      
     |      prefix='' matches all errors and warnings
     |      prefix='E' matches all errors
     |      prefix='W' matches all warnings
     |      prefix='E4' matches all errors that have to do with imports
     |  
     |  increment_logical_line(self)
     |      Signal a new logical line.
     |  
     |  print_benchmark(self)
     |      Print benchmark numbers.
     |  
     |  print_statistics(self, prefix='')
     |      Print overall statistics (number of errors and warnings).
     |  
     |  start(self)
     |      Start the timer.
     |  
     |  stop(self)
     |      Stop the timer.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from BaseReport:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from BaseReport:
     |  
     |  print_filename = False
    
    class StyleGuide(builtins.object)
     |  StyleGuide(*args, **kwargs)
     |  
     |  Initialize a PEP-8 instance with few options.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  check_files(self, paths=None)
     |      Run all checks on the paths.
     |  
     |  excluded(self, filename, parent=None)
     |      Check if the file should be excluded.
     |      
     |      Check if 'options.exclude' contains a pattern matching filename.
     |  
     |  get_checks(self, argument_name)
     |      Get all the checks for this category.
     |      
     |      Find all globally visible functions where the first argument
     |      name starts with argument_name and which contain selected tests.
     |  
     |  ignore_code(self, code)
     |      Check if the error code should be ignored.
     |      
     |      If 'options.select' contains a prefix of the error code,
     |      return False.  Else, if 'options.ignore' contains a prefix of
     |      the error code, return True.
     |  
     |  init_report(self, reporter=None)
     |      Initialize the report instance.
     |  
     |  input_dir(self, dirname)
     |      Check all files in this directory and all subdirectories.
     |  
     |  input_file(self, filename, lines=None, expected=None, line_offset=0)
     |      Run all checks on a Python source file.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    ambiguous_identifier(logical_line, tokens)
        Never use the characters 'l', 'O', or 'I' as variable names.
        
        In some fonts, these characters are indistinguishable from the
        numerals one and zero. When tempted to use 'l', use 'L' instead.
        
        Okay: L = 0
        Okay: o = 123
        Okay: i = 42
        E741: l = 0
        E741: O = 123
        E741: I = 42
        
        Variables can be bound in several other contexts, including class
        and function definitions, 'global' and 'nonlocal' statements,
        exception handlers, and 'with' statements.
        
        Okay: except AttributeError as o:
        Okay: with lock as L:
        E741: except AttributeError as O:
        E741: with lock as l:
        E741: global I
        E741: nonlocal l
        E742: class I(object):
        E743: def l(x):
    
    bare_except(logical_line, noqa)
        When catching exceptions, mention specific exceptions when
        possible.
        
        Okay: except Exception:
        Okay: except BaseException:
        E722: except:
    
    blank_lines(logical_line, blank_lines, indent_level, line_number, blank_before, previous_logical, previous_unindented_logical_line, previous_indent_level, lines)
        Separate top-level function and class definitions with two blank
        lines.
        
        Method definitions inside a class are separated by a single blank
        line.
        
        Extra blank lines may be used (sparingly) to separate groups of
        related functions.  Blank lines may be omitted between a bunch of
        related one-liners (e.g. a set of dummy implementations).
        
        Use blank lines in functions, sparingly, to indicate logical
        sections.
        
        Okay: def a():\n    pass\n\n\ndef b():\n    pass
        Okay: def a():\n    pass\n\n\nasync def b():\n    pass
        Okay: def a():\n    pass\n\n\n# Foo\n# Bar\n\ndef b():\n    pass
        Okay: default = 1\nfoo = 1
        Okay: classify = 1\nfoo = 1
        
        E301: class Foo:\n    b = 0\n    def bar():\n        pass
        E302: def a():\n    pass\n\ndef b(n):\n    pass
        E302: def a():\n    pass\n\nasync def b(n):\n    pass
        E303: def a():\n    pass\n\n\n\ndef b(n):\n    pass
        E303: def a():\n\n\n\n    pass
        E304: @decorator\n\ndef a():\n    pass
        E305: def a():\n    pass\na()
        E306: def a():\n    def b():\n        pass\n    def c():\n        pass
    
    break_after_binary_operator(logical_line, tokens)
        Avoid breaks after binary operators.
        
        The preferred place to break around a binary operator is before the
        operator, not after it.
        
        W504: (width == 0 +\n height == 0)
        W504: (width == 0 and\n height == 0)
        W504: var = (1 &\n       ~2)
        
        Okay: foo(\n    -x)
        Okay: foo(x\n    [])
        Okay: x = '''\n''' + ''
        Okay: x = '' + '''\n'''
        Okay: foo(x,\n    -y)
        Okay: foo(x,  # comment\n    -y)
        
        The following should be W504 but unary_context is tricky with these
        Okay: var = (1 /\n       -2)
        Okay: var = (1 +\n       -1 +\n       -2)
    
    break_before_binary_operator(logical_line, tokens)
        Avoid breaks before binary operators.
        
        The preferred place to break around a binary operator is after the
        operator, not before it.
        
        W503: (width == 0\n + height == 0)
        W503: (width == 0\n and height == 0)
        W503: var = (1\n       & ~2)
        W503: var = (1\n       / -2)
        W503: var = (1\n       + -1\n       + -2)
        
        Okay: foo(\n    -x)
        Okay: foo(x\n    [])
        Okay: x = '''\n''' + ''
        Okay: foo(x,\n    -y)
        Okay: foo(x,  # comment\n    -y)
    
    comparison_negative(logical_line)
        Negative comparison should be done using "not in" and "is not".
        
        Okay: if x not in y:\n    pass
        Okay: assert (X in Y or X is Z)
        Okay: if not (X in Y):\n    pass
        Okay: zz = x is not y
        E713: Z = not X in Y
        E713: if not X.B in Y:\n    pass
        E714: if not X is Y:\n    pass
        E714: Z = not X.B is Y
    
    comparison_to_singleton(logical_line, noqa)
        Comparison to singletons should use "is" or "is not".
        
        Comparisons to singletons like None should always be done
        with "is" or "is not", never the equality operators.
        
        Okay: if arg is not None:
        E711: if arg != None:
        E711: if None == arg:
        E712: if arg == True:
        E712: if False == arg:
        
        Also, beware of writing if x when you really mean if x is not None
        -- e.g. when testing whether a variable or argument that defaults to
        None was set to some other value.  The other value might have a type
        (such as a container) that could be false in a boolean context!
    
    comparison_type(logical_line, noqa)
        Object type comparisons should always use isinstance().
        
        Do not compare types directly.
        
        Okay: if isinstance(obj, int):
        E721: if type(obj) is type(1):
        
        When checking if an object is a string, keep in mind that it might
        be a unicode string too! In Python 2.3, str and unicode have a
        common base class, basestring, so you can do:
        
        Okay: if isinstance(obj, basestring):
        Okay: if type(a1) is type(b1):
    
    compound_statements(logical_line)
        Compound statements (on the same line) are generally
        discouraged.
        
        While sometimes it's okay to put an if/for/while with a small body
        on the same line, never do this for multi-clause statements.
        Also avoid folding such long lines!
        
        Always use a def statement instead of an assignment statement that
        binds a lambda expression directly to a name.
        
        Okay: if foo == 'blah':\n    do_blah_thing()
        Okay: do_one()
        Okay: do_two()
        Okay: do_three()
        
        E701: if foo == 'blah': do_blah_thing()
        E701: for x in lst: total += x
        E701: while t < 10: t = delay()
        E701: if foo == 'blah': do_blah_thing()
        E701: else: do_non_blah_thing()
        E701: try: something()
        E701: finally: cleanup()
        E701: if foo == 'blah': one(); two(); three()
        E702: do_one(); do_two(); do_three()
        E703: do_four();  # useless semicolon
        E704: def f(x): return 2*x
        E731: f = lambda x: 2*x
    
    continued_indentation(logical_line, tokens, indent_level, hang_closing, indent_char, noqa, verbose)
        Continuation lines indentation.
        
        Continuation lines should align wrapped elements either vertically
        using Python's implicit line joining inside parentheses, brackets
        and braces, or using a hanging indent.
        
        When using a hanging indent these considerations should be applied:
        - there should be no arguments on the first line, and
        - further indentation should be used to clearly distinguish itself
          as a continuation line.
        
        Okay: a = (\n)
        E123: a = (\n    )
        
        Okay: a = (\n    42)
        E121: a = (\n   42)
        E122: a = (\n42)
        E123: a = (\n    42\n    )
        E124: a = (24,\n     42\n)
        E125: if (\n    b):\n    pass
        E126: a = (\n        42)
        E127: a = (24,\n      42)
        E128: a = (24,\n    42)
        E129: if (a or\n    b):\n    pass
        E131: a = (\n    42\n 24)
    
    expand_indent(line)
        Return the amount of indentation.
        
        Tabs are expanded to the next multiple of 8.
        
        >>> expand_indent('    ')
        4
        >>> expand_indent('\t')
        8
        >>> expand_indent('       \t')
        8
        >>> expand_indent('        \t')
        16
    
    explicit_line_join(logical_line, tokens)
        Avoid explicit line join between brackets.
        
        The preferred way of wrapping long lines is by using Python's
        implied line continuation inside parentheses, brackets and braces.
        Long lines can be broken over multiple lines by wrapping expressions
        in parentheses.  These should be used in preference to using a
        backslash for line continuation.
        
        E502: aaa = [123, \\n       123]
        E502: aaa = ("bbb " \\n       "ccc")
        
        Okay: aaa = [123,\n       123]
        Okay: aaa = ("bbb "\n       "ccc")
        Okay: aaa = "bbb " \\n    "ccc"
        Okay: aaa = 123  # \\
    
    extraneous_whitespace(logical_line)
        Avoid extraneous whitespace.
        
        Avoid extraneous whitespace in these situations:
        - Immediately inside parentheses, brackets or braces.
        - Immediately before a comma, semicolon, or colon.
        
        Okay: spam(ham[1], {eggs: 2})
        E201: spam( ham[1], {eggs: 2})
        E201: spam(ham[ 1], {eggs: 2})
        E201: spam(ham[1], { eggs: 2})
        E202: spam(ham[1], {eggs: 2} )
        E202: spam(ham[1 ], {eggs: 2})
        E202: spam(ham[1], {eggs: 2 })
        
        E203: if x == 4: print x, y; x, y = y , x
        E203: if x == 4: print x, y ; x, y = y, x
        E203: if x == 4 : print x, y; x, y = y, x
    
    filename_match(filename, patterns, default=True)
        Check if patterns contains a pattern that matches filename.
        
        If patterns is unspecified, this always returns True.
    
    get_parser(prog='pycodestyle', version='2.5.0')
        Create the parser for the program.
    
    imports_on_separate_lines(logical_line)
        Place imports on separate lines.
        
        Okay: import os\nimport sys
        E401: import sys, os
        
        Okay: from subprocess import Popen, PIPE
        Okay: from myclas import MyClass
        Okay: from foo.bar.yourclass import YourClass
        Okay: import myclass
        Okay: import foo.bar.yourclass
    
    indentation(logical_line, previous_logical, indent_char, indent_level, previous_indent_level)
        Use 4 spaces per indentation level.
        
        For really old code that you don't want to mess up, you can continue
        to use 8-space tabs.
        
        Okay: a = 1
        Okay: if a == 0:\n    a = 1
        E111:   a = 1
        E114:   # a = 1
        
        Okay: for item in items:\n    pass
        E112: for item in items:\npass
        E115: for item in items:\n# Hi\n    pass
        
        Okay: a = 1\nb = 2
        E113: a = 1\n    b = 2
        E116: a = 1\n    # b = 2
    
    maximum_doc_length(logical_line, max_doc_length, noqa, tokens)
        Limit all doc lines to a maximum of 72 characters.
        
        For flowing long blocks of text (docstrings or comments), limiting
        the length to 72 characters is recommended.
        
        Reports warning W505
    
    maximum_line_length(physical_line, max_line_length, multiline, line_number, noqa)
        Limit all lines to a maximum of 79 characters.
        
        There are still many devices around that are limited to 80 character
        lines; plus, limiting windows to 80 characters makes it possible to
        have several windows side-by-side.  The default wrapping on such
        devices looks ugly.  Therefore, please limit all lines to a maximum
        of 79 characters. For flowing long blocks of text (docstrings or
        comments), limiting the length to 72 characters is recommended.
        
        Reports error E501.
    
    missing_whitespace(logical_line)
        Each comma, semicolon or colon should be followed by whitespace.
        
        Okay: [a, b]
        Okay: (3,)
        Okay: a[1:4]
        Okay: a[:4]
        Okay: a[1:]
        Okay: a[1:4:2]
        E231: ['a','b']
        E231: foo(bar,baz)
        E231: [{'a':'b'}]
    
    missing_whitespace_after_import_keyword(logical_line)
        Multiple imports in form from x import (a, b, c) should have
        space between import statement and parenthesised name list.
        
        Okay: from foo import (bar, baz)
        E275: from foo import(bar, baz)
        E275: from importable.module import(bar, baz)
    
    missing_whitespace_around_operator(logical_line, tokens)
        Surround operators with a single space on either side.
        
        - Always surround these binary operators with a single space on
          either side: assignment (=), augmented assignment (+=, -= etc.),
          comparisons (==, <, >, !=, <=, >=, in, not in, is, is not),
          Booleans (and, or, not).
        
        - If operators with different priorities are used, consider adding
          whitespace around the operators with the lowest priorities.
        
        Okay: i = i + 1
        Okay: submitted += 1
        Okay: x = x * 2 - 1
        Okay: hypot2 = x * x + y * y
        Okay: c = (a + b) * (a - b)
        Okay: foo(bar, key='word', *args, **kwargs)
        Okay: alpha[:-i]
        
        E225: i=i+1
        E225: submitted +=1
        E225: x = x /2 - 1
        E225: z = x **y
        E226: c = (a+b) * (a-b)
        E226: hypot2 = x*x + y*y
        E227: c = a|b
        E228: msg = fmt%(errno, errmsg)
    
    module_imports_on_top_of_file(logical_line, indent_level, checker_state, noqa)
        Place imports at the top of the file.
        
        Always put imports at the top of the file, just after any module
        comments and docstrings, and before module globals and constants.
        
        Okay: import os
        Okay: # this is a comment\nimport os
        Okay: '''this is a module docstring'''\nimport os
        Okay: r'''this is a module docstring'''\nimport os
        Okay:
        try:\n\timport x\nexcept ImportError:\n\tpass\nelse:\n\tpass\nimport y
        Okay:
        try:\n\timport x\nexcept ImportError:\n\tpass\nfinally:\n\tpass\nimport y
        E402: a=1\nimport os
        E402: 'One string'\n"Two string"\nimport os
        E402: a=1\nfrom sys import x
        
        Okay: if x:\n    import os
    
    mute_string(text)
        Replace contents with 'xxx' to prevent syntax matching.
        
        >>> mute_string('"abc"')
        '"xxx"'
        >>> mute_string("'''abc'''")
        "'''xxx'''"
        >>> mute_string("r'abc'")
        "r'xxx'"
    
    normalize_paths(value, parent='.')
        Parse a comma-separated list of paths.
        
        Return a list of absolute paths.
    
    parse_udiff(diff, patterns=None, parent='.')
        Return a dictionary of matching lines.
    
    process_options(arglist=None, parse_argv=False, config_file=None, parser=None, verbose=None)
        Process options passed either via arglist or command line args.
        
        Passing in the ``config_file`` parameter allows other tools, such as
        flake8 to specify their own options to be processed in pycodestyle.
    
    python_3000_async_await_keywords(logical_line, tokens)
        'async' and 'await' are reserved keywords starting at Python 3.7.
        
        W606: async = 42
        W606: await = 42
        Okay: async def read(db):
        data = await db.fetch('SELECT ...')
    
    python_3000_backticks(logical_line)
        Use repr() instead of backticks in Python 3.
        
        Okay: val = repr(1 + 2)
        W604: val = `1 + 2`
    
    python_3000_has_key(logical_line, noqa)
        The {}.has_key() method is removed in Python 3: use the 'in'
        operator.
        
        Okay: if "alph" in d:\n    print d["alph"]
        W601: assert d.has_key('alph')
    
    python_3000_invalid_escape_sequence(logical_line, tokens, noqa)
        Invalid escape sequences are deprecated in Python 3.6.
        
        Okay: regex = r'\.png$'
        W605: regex = '\.png$'
    
    python_3000_not_equal(logical_line)
        New code should always use != instead of <>.
        
        The older syntax is removed in Python 3.
        
        Okay: if a != 'no':
        W603: if a <> 'no':
    
    python_3000_raise_comma(logical_line)
        When raising an exception, use "raise ValueError('message')".
        
        The older form is removed in Python 3.
        
        Okay: raise DummyError("Message")
        W602: raise DummyError, "Message"
    
    read_config(options, args, arglist, parser)
        Read and parse configurations.
        
        If a config file is specified on the command line with the
        "--config" option, then only it is used for configuration.
        
        Otherwise, the user configuration (~/.config/pycodestyle) and any
        local configurations in the current directory or above will be
        merged together (in that order) using the read method of
        ConfigParser.
    
    readlines(filename)
        Read the source code.
    
    register_check(check, codes=None)
        Register a new check object.
    
    stdin_get_value()
        Read the value from stdin.
    
    tabs_obsolete(physical_line)
        On new projects, spaces-only are strongly recommended over tabs.
        
        Okay: if True:\n    return
        W191: if True:\n\treturn
    
    tabs_or_spaces(physical_line, indent_char)
        Never mix tabs and spaces.
        
        The most popular way of indenting Python is with spaces only.  The
        second-most popular way is with tabs only.  Code indented with a
        mixture of tabs and spaces should be converted to using spaces
        exclusively.  When invoking the Python command line interpreter with
        the -t option, it issues warnings about code that illegally mixes
        tabs and spaces.  When using -tt these warnings become errors.
        These options are highly recommended!
        
        Okay: if a == 0:\n    a = 1\n    b = 1
        E101: if a == 0:\n        a = 1\n\tb = 1
    
    trailing_blank_lines(physical_line, lines, line_number, total_lines)
        Trailing blank lines are superfluous.
        
        Okay: spam(1)
        W391: spam(1)\n
        
        However the last line should end with a new line (warning W292).
    
    trailing_whitespace(physical_line)
        Trailing whitespace is superfluous.
        
        The warning returned varies on whether the line itself is blank,
        for easier filtering for those who want to indent their blank lines.
        
        Okay: spam(1)\n#
        W291: spam(1) \n#
        W293: class Foo(object):\n    \n    bang = 12
    
    update_counts(s, counts)
        Adds one to the counts of each appearance of characters in s,
        for characters in counts
    
    whitespace_around_comma(logical_line)
        Avoid extraneous whitespace after a comma or a colon.
        
        Note: these checks are disabled by default
        
        Okay: a = (1, 2)
        E241: a = (1,  2)
        E242: a = (1,\t2)
    
    whitespace_around_keywords(logical_line)
        Avoid extraneous whitespace around keywords.
        
        Okay: True and False
        E271: True and  False
        E272: True  and False
        E273: True and\tFalse
        E274: True\tand False
    
    whitespace_around_named_parameter_equals(logical_line, tokens)
        Don't use spaces around the '=' sign in function arguments.
        
        Don't use spaces around the '=' sign when used to indicate a
        keyword argument or a default parameter value, except when
        using a type annotation.
        
        Okay: def complex(real, imag=0.0):
        Okay: return magic(r=real, i=imag)
        Okay: boolean(a == b)
        Okay: boolean(a != b)
        Okay: boolean(a <= b)
        Okay: boolean(a >= b)
        Okay: def foo(arg: int = 42):
        Okay: async def foo(arg: int = 42):
        
        E251: def complex(real, imag = 0.0):
        E251: return magic(r = real, i = imag)
        E252: def complex(real, image: float=0.0):
    
    whitespace_around_operator(logical_line)
        Avoid extraneous whitespace around an operator.
        
        Okay: a = 12 + 3
        E221: a = 4  + 5
        E222: a = 4 +  5
        E223: a = 4\t+ 5
        E224: a = 4 +\t5
    
    whitespace_before_comment(logical_line, tokens)
        Separate inline comments by at least two spaces.
        
        An inline comment is a comment on the same line as a statement.
        Inline comments should be separated by at least two spaces from the
        statement. They should start with a # and a single space.
        
        Each line of a block comment starts with a # and a single space
        (unless it is indented text inside the comment).
        
        Okay: x = x + 1  # Increment x
        Okay: x = x + 1    # Increment x
        Okay: # Block comment
        E261: x = x + 1 # Increment x
        E262: x = x + 1  #Increment x
        E262: x = x + 1  #  Increment x
        E265: #Block comment
        E266: ### Block comment
    
    whitespace_before_parameters(logical_line, tokens)
        Avoid extraneous whitespace.
        
        Avoid extraneous whitespace in the following situations:
        - before the open parenthesis that starts the argument list of a
          function call.
        - before the open parenthesis that starts an indexing or slicing.
        
        Okay: spam(1)
        E211: spam (1)
        
        Okay: dict['key'] = list[index]
        E211: dict ['key'] = list[index]
        E211: dict['key'] = list [index]

DATA
    ARITHMETIC_OP = frozenset({'*', '**', '+', '-', '/', '//'})
    BENCHMARK_KEYS = ['directories', 'files', 'logical lines', 'physical l...
    BLANK_LINES_CONFIG = {'method': 1, 'top_level': 2}
    COMPARE_NEGATIVE_REGEX = re.compile('\\b(not)\\s+[^][)(}{ ]+\\s+(in|is...
    COMPARE_SINGLETON_REGEX = re.compile('(\\bNone|\\bFalse|\\bTrue)?\\s*(...
    COMPARE_TYPE_REGEX = re.compile('(?:[=!]=|is(?:\\s+not)?)\\s*type(?:s....
    DEFAULT_EXCLUDE = '.svn,CVS,.bzr,.hg,.git,__pycache__,.tox'
    DEFAULT_IGNORE = 'E121,E123,E126,E226,E24,E704,W503,W504'
    DOCSTRING_REGEX = re.compile('u?r?["\\\']')
    DUNDER_REGEX = re.compile('^__([^\\s]+)__ = ')
    ERRORCODE_REGEX = re.compile('\\b[A-Z]\\d{3}\\b')
    EXTRANEOUS_WHITESPACE_REGEX = re.compile('[\\[({] | [\\]}),;:]')
    FUNCTION_RETURN_ANNOTATION_OP = ['->']
    HUNK_REGEX = re.compile('^@@ -\\d+(?:,\\d+)? \\+(\\d+)(?:,(\\d+))? @@....
    INDENT_REGEX = re.compile('([ \\t]*)')
    KEYWORDS = frozenset({'and', 'as', 'assert', 'async', 'await', 'break'...
    KEYWORD_REGEX = re.compile('(\\s*)\\b(?:if|with|raise|global|in|...ry|...
    LAMBDA_REGEX = re.compile('\\blambda\\b')
    MAX_DOC_LENGTH = 72
    MAX_LINE_LENGTH = 79
    NEWLINE = frozenset({4, 56})
    OPERATOR_REGEX = re.compile('(?:[^,\\s])(\\s*)(?:[-+*/|!<=>%&^]+)(\\s*...
    PROJECT_CONFIG = ('setup.cfg', 'tox.ini')
    PyCF_ONLY_AST = 1024
    RAISE_COMMA_REGEX = re.compile('raise\\s+\\w+\\s*,')
    REPORT_FORMAT = {'default': '%(path)s:%(row)d:%(col)d: %(code)s %(text...
    RERAISE_COMMA_REGEX = re.compile('raise\\s+\\w+\\s*,.*,\\s*\\w+\\s*$')
    SINGLETONS = frozenset({'False', 'None', 'True'})
    SKIP_COMMENTS = frozenset({4, 5, 6, 54, 55, 56})
    SKIP_TOKENS = frozenset({4, 5, 6, 56})
    STARTSWITH_DEF_REGEX = re.compile('^(async\\s+def|def)\\b')
    STARTSWITH_INDENT_STATEMENT_REGEX = re.compile('^\\s*(def|async\\s+def...
    STARTSWITH_TOP_LEVEL_REGEX = re.compile('^(async\\s+def\\s+|def\\s+|cl...
    TESTSUITE_PATH = r'C:\Users\liteng\AppData\Roaming\Python\Python37\sit...
    UNARY_OPERATORS = frozenset({'*', '**', '+', '-', '>>'})
    USER_CONFIG = r'C:\Users\liteng\.pycodestyle'
    WHITESPACE = frozenset({'\t', ' '})
    WHITESPACE_AFTER_COMMA_REGEX = re.compile('[,;:]\\s*(?:  |\\t)')
    WS_NEEDED_OPERATORS = frozenset({'!=', '%=', '&=', '**=', '*=', '+=', ...
    WS_OPTIONAL_OPERATORS = frozenset({'%', '&', '*', '**', '+', '-', ...}...
    with_statement = _Feature((2, 5, 0, 'alpha', 1), (2, 6, 0, 'alpha', 0)...

VERSION
    2.5.0

FILE
    c:\users\liteng\appdata\roaming\python\python37\site-packages\pycodestyle.py


