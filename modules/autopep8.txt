Help on module autopep8:

NAME
    autopep8 - Automatically formats Python code to conform to the PEP 8 style guide.

DESCRIPTION
    Fixes that only need be done once can be added by adding a function of the form
    "fix_<code>(source)" to this module. They should return the fixed source code.
    These fixes are picked up by apply_global_fixes().
    
    Fixes that depend on pycodestyle should be added as methods to FixPEP8. See the
    class documentation for more information.

CLASSES
    builtins.object
        Atom
        CachedTokenizer
        Container
            DictOrSet
            IfExpression
            List
            ListComprehension
            Tuple
        FixPEP8
        LineEndingWrapper
        ReformattedLines
        Reindenter
    builtins.tuple(builtins.object)
        Token
    
    class Atom(builtins.object)
     |  Atom(atom)
     |  
     |  The smallest unbreakable unit that can be reflowed.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, atom)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __len__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  emit(self)
     |  
     |  reflow(self, reflowed_lines, continued_indent, extent, break_after_open_bracket=False, is_list_comp_or_if_expr=False, next_is_dot=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  is_colon
     |  
     |  is_comma
     |  
     |  is_keyword
     |  
     |  is_name
     |  
     |  is_number
     |  
     |  is_string
     |  
     |  size
    
    class CachedTokenizer(builtins.object)
     |  A one-element cache around tokenize.generate_tokens().
     |  
     |  Original code written by Ned Batchelder, in coverage.py.
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  generate_tokens(self, text)
     |      A stand-in for tokenize.generate_tokens().
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Container(builtins.object)
     |  Container(items)
     |  
     |  Base class for all container types.
     |  
     |  Methods defined here:
     |  
     |  __getitem__(self, idx)
     |  
     |  __init__(self, items)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  reflow(self, reflowed_lines, continued_indent, break_after_open_bracket=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  close_bracket
     |  
     |  is_colon
     |  
     |  is_comma
     |  
     |  is_keyword
     |  
     |  is_name
     |  
     |  is_string
     |  
     |  open_bracket
     |  
     |  size
    
    class DictOrSet(Container)
     |  DictOrSet(items)
     |  
     |  A high-level representation of a dictionary or set.
     |  
     |  Method resolution order:
     |      DictOrSet
     |      Container
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  close_bracket
     |  
     |  open_bracket
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Container:
     |  
     |  __getitem__(self, idx)
     |  
     |  __init__(self, items)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  reflow(self, reflowed_lines, continued_indent, break_after_open_bracket=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Container:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  is_colon
     |  
     |  is_comma
     |  
     |  is_keyword
     |  
     |  is_name
     |  
     |  is_string
     |  
     |  size
    
    class FixPEP8(builtins.object)
     |  FixPEP8(filename, options, contents=None, long_line_ignore_cache=None)
     |  
     |  Fix invalid code.
     |  
     |  Fixer methods are prefixed "fix_". The _fix_source() method looks for these
     |  automatically.
     |  
     |  The fixer method can take either one or two arguments (in addition to
     |  self). The first argument is "result", which is the error information from
     |  pycodestyle. The second argument, "logical", is required only for
     |  logical-line fixes.
     |  
     |  The fixer method can return the list of modified lines or None. An empty
     |  list would mean that no changes were made. None would mean that only the
     |  line reported in the pycodestyle error was modified. Note that the modified
     |  line numbers that are returned are indexed at 1. This typically would
     |  correspond with the line number reported in the pycodestyle error
     |  information.
     |  
     |  [fixed method list]
     |      - e111,e114,e115,e116
     |      - e121,e122,e123,e124,e125,e126,e127,e128,e129
     |      - e201,e202,e203
     |      - e211
     |      - e221,e222,e223,e224,e225
     |      - e231
     |      - e251,e252
     |      - e261,e262
     |      - e271,e272,e273,e274
     |      - e301,e302,e303,e304,e305,e306
     |      - e401,e402
     |      - e502
     |      - e701,e702,e703,e704
     |      - e711,e712,e713,e714
     |      - e722
     |      - e731
     |      - w291
     |      - w503,504
     |  
     |  Methods defined here:
     |  
     |  __init__(self, filename, options, contents=None, long_line_ignore_cache=None)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  fix(self)
     |      Return a version of the source code with PEP 8 violations fixed.
     |  
     |  fix_e112(self, result)
     |      Fix under-indented comments.
     |  
     |  fix_e113(self, result)
     |      Fix unexpected indentation.
     |  
     |  fix_e116(self, result)
     |      Fix over-indented comments.
     |  
     |  fix_e125(self, result)
     |      Fix indentation undistinguish from the next logical line.
     |  
     |  fix_e131(self, result)
     |      Fix indentation undistinguish from the next logical line.
     |  
     |  fix_e201(self, result)
     |      Remove extraneous whitespace.
     |  
     |  fix_e224(self, result)
     |      Remove extraneous whitespace around operator.
     |  
     |  fix_e225(self, result)
     |      Fix missing whitespace around operator.
     |  
     |  fix_e231(self, result)
     |      Add missing whitespace.
     |  
     |  fix_e251(self, result)
     |      Remove whitespace around parameter '=' sign.
     |  
     |  fix_e262(self, result)
     |      Fix spacing after comment hash.
     |  
     |  fix_e271(self, result)
     |      Fix extraneous whitespace around keywords.
     |  
     |  fix_e301(self, result)
     |      Add missing blank line.
     |  
     |  fix_e302(self, result)
     |      Add missing 2 blank lines.
     |  
     |  fix_e303(self, result)
     |      Remove extra blank lines.
     |  
     |  fix_e304(self, result)
     |      Remove blank line following function decorator.
     |  
     |  fix_e305(self, result)
     |      Add missing 2 blank lines after end of function or class.
     |  
     |  fix_e401(self, result)
     |      Put imports on separate lines.
     |  
     |  fix_e402(self, result)
     |  
     |  fix_e502(self, result)
     |      Remove extraneous escape of newline.
     |  
     |  fix_e701(self, result)
     |      Put colon-separated compound statement on separate lines.
     |  
     |  fix_e702(self, result, logical)
     |      Put semicolon-separated compound statement on separate lines.
     |  
     |  fix_e704(self, result)
     |      Fix multiple statements on one line def
     |  
     |  fix_e711(self, result)
     |      Fix comparison with None.
     |  
     |  fix_e712(self, result)
     |      Fix (trivial case of) comparison with boolean.
     |  
     |  fix_e713(self, result)
     |      Fix (trivial case of) non-membership check.
     |  
     |  fix_e714(self, result)
     |      Fix object identity should be 'is not' case.
     |  
     |  fix_e722(self, result)
     |      fix bare except
     |  
     |  fix_e731(self, result)
     |      Fix do not assign a lambda expression check.
     |  
     |  fix_long_line(self, target, previous_line, next_line, original)
     |  
     |  fix_long_line_logically(self, result, logical)
     |      Try to make lines fit within --max-line-length characters.
     |  
     |  fix_long_line_physically(self, result)
     |      Try to make lines fit within --max-line-length characters.
     |  
     |  fix_w291(self, result)
     |      Remove trailing whitespace.
     |  
     |  fix_w391(self, _)
     |      Remove trailing blank lines.
     |  
     |  fix_w503(self, result)
     |  
     |  fix_w504(self, result)
     |  
     |  fix_w605(self, result)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class IfExpression(Container)
     |  IfExpression(items)
     |  
     |  A high-level representation of an if-expression.
     |  
     |  Method resolution order:
     |      IfExpression
     |      Container
     |      builtins.object
     |  
     |  Methods inherited from Container:
     |  
     |  __getitem__(self, idx)
     |  
     |  __init__(self, items)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  reflow(self, reflowed_lines, continued_indent, break_after_open_bracket=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Container:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  close_bracket
     |  
     |  is_colon
     |  
     |  is_comma
     |  
     |  is_keyword
     |  
     |  is_name
     |  
     |  is_string
     |  
     |  open_bracket
     |  
     |  size
    
    class LineEndingWrapper(builtins.object)
     |  LineEndingWrapper(output)
     |  
     |  Replace line endings to work with sys.stdout.
     |  
     |  It seems that sys.stdout expects only '\n' as the line ending, no matter
     |  the platform. Otherwise, we get repeated line endings.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, output)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  flush(self)
     |  
     |  write(self, s)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class List(Container)
     |  List(items)
     |  
     |  A high-level representation of a list.
     |  
     |  Method resolution order:
     |      List
     |      Container
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  close_bracket
     |  
     |  open_bracket
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Container:
     |  
     |  __getitem__(self, idx)
     |  
     |  __init__(self, items)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  reflow(self, reflowed_lines, continued_indent, break_after_open_bracket=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Container:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  is_colon
     |  
     |  is_comma
     |  
     |  is_keyword
     |  
     |  is_name
     |  
     |  is_string
     |  
     |  size
    
    class ListComprehension(Container)
     |  ListComprehension(items)
     |  
     |  A high-level representation of a list comprehension.
     |  
     |  Method resolution order:
     |      ListComprehension
     |      Container
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  size
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Container:
     |  
     |  __getitem__(self, idx)
     |  
     |  __init__(self, items)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  reflow(self, reflowed_lines, continued_indent, break_after_open_bracket=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Container:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  close_bracket
     |  
     |  is_colon
     |  
     |  is_comma
     |  
     |  is_keyword
     |  
     |  is_name
     |  
     |  is_string
     |  
     |  open_bracket
    
    class ReformattedLines(builtins.object)
     |  ReformattedLines(max_line_length)
     |  
     |  The reflowed lines of atoms.
     |  
     |  Each part of the line is represented as an "atom." They can be moved
     |  around when need be to get the optimal formatting.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, max_line_length)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  add(self, obj, indent_amt, break_after_open_bracket)
     |  
     |  add_comment(self, item)
     |  
     |  add_indent(self, indent_amt)
     |  
     |  add_line_break(self, indent)
     |  
     |  add_line_break_at(self, index, indent_amt)
     |  
     |  add_space_if_needed(self, curr_text, equal=False)
     |  
     |  current_size(self)
     |      The size of the current line minus the indentation.
     |  
     |  emit(self)
     |  
     |  fits_on_current_line(self, item_extent)
     |  
     |  line_empty(self)
     |  
     |  previous_item(self)
     |      Return the previous non-whitespace item.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Reindenter(builtins.object)
     |  Reindenter(input_text)
     |  
     |  Reindents badly-indented code to uniformly use four-space indentation.
     |  
     |  Released to the public domain, by Tim Peters, 03 October 2000.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, input_text)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  getline(self)
     |      Line-getter for tokenize.
     |  
     |  run(self, indent_size=4)
     |      Fix indentation and return modified line numbers.
     |      
     |      Line numbers are indexed at 1.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class Token(builtins.tuple)
     |  Token(token_type, token_string, spos, epos, line)
     |  
     |  Token(token_type, token_string, spos, epos, line)
     |  
     |  Method resolution order:
     |      Token
     |      builtins.tuple
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __getnewargs__(self)
     |      Return self as a plain tuple.  Used by copy and pickle.
     |  
     |  __repr__(self)
     |      Return a nicely formatted representation string
     |  
     |  _asdict(self)
     |      Return a new OrderedDict which maps field names to their values.
     |  
     |  _replace(_self, **kwds)
     |      Return a new Token object replacing specified fields with new values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |  
     |  _make(iterable) from builtins.type
     |      Make a new Token object from a sequence or iterable
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(_cls, token_type, token_string, spos, epos, line)
     |      Create new instance of Token(token_type, token_string, spos, epos, line)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  token_type
     |      Alias for field number 0
     |  
     |  token_string
     |      Alias for field number 1
     |  
     |  spos
     |      Alias for field number 2
     |  
     |  epos
     |      Alias for field number 3
     |  
     |  line
     |      Alias for field number 4
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  _field_defaults = {}
     |  
     |  _fields = ('token_type', 'token_string', 'spos', 'epos', 'line')
     |  
     |  _fields_defaults = {}
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.tuple:
     |  
     |  __add__(self, value, /)
     |      Return self+value.
     |  
     |  __contains__(self, key, /)
     |      Return key in self.
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(self, key, /)
     |      Return self[key].
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __hash__(self, /)
     |      Return hash(self).
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __mul__(self, value, /)
     |      Return self*value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __rmul__(self, value, /)
     |      Return value*self.
     |  
     |  count(self, value, /)
     |      Return number of occurrences of value.
     |  
     |  index(self, value, start=0, stop=9223372036854775807, /)
     |      Return first index of value.
     |      
     |      Raises ValueError if the value is not present.
    
    class Tuple(Container)
     |  Tuple(items)
     |  
     |  A high-level representation of a tuple.
     |  
     |  Method resolution order:
     |      Tuple
     |      Container
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  close_bracket
     |  
     |  open_bracket
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Container:
     |  
     |  __getitem__(self, idx)
     |  
     |  __init__(self, items)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  __iter__(self)
     |  
     |  __repr__(self)
     |      Return repr(self).
     |  
     |  reflow(self, reflowed_lines, continued_indent, break_after_open_bracket=False)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Container:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  is_colon
     |  
     |  is_comma
     |  
     |  is_keyword
     |  
     |  is_name
     |  
     |  is_string
     |  
     |  size

FUNCTIONS
    apply_global_fixes(source, options, where='global', filename='', codes=None)
        Run global fixes on source code.
        
        These are fixes that only need be done once (unlike those in
        FixPEP8, which are dependent on pycodestyle).
    
    check_syntax(code)
        Return True if syntax is okay.
    
    code_almost_equal(a, b)
        Return True if code is similar.
        
        Ignore whitespace when comparing specific line.
    
    code_match(code, select, ignore)
    
    code_to_2to3(select, ignore, where='', verbose=False)
    
    commented_out_code_lines(source)
        Return line numbers of comments that are likely code.
        
        Commented-out code is bad practice, but modifying it just adds even
        more clutter.
    
    continued_indentation(logical_line, tokens, indent_level, hang_closing, indent_char, noqa)
        Override pycodestyle's function to provide indentation information.
    
    count_unbalanced_brackets(line)
        Return number of unmatched open/close brackets.
    
    create_parser()
        Return command-line parser.
    
    decode_filename(filename)
        Return Unicode filename.
    
    detect_encoding(filename, limit_byte_check=-1)
        Return file encoding.
    
    docstring_summary(docstring)
        Return summary of docstring.
    
    extended_blank_lines(logical_line, blank_lines, blank_before, indent_level, previous_logical)
        Check for missing blank lines after class declaration.
    
    extract_code_from_function(function)
        Return code handled by function.
    
    filter_results(source, results, aggressive)
        Filter out spurious reports from pycodestyle.
        
        If aggressive is True, we allow possibly unsafe fixes (E711, E712).
    
    find_files(filenames, recursive, exclude)
        Yield filenames.
    
    find_newline(source)
        Return type of newline used in source.
        
        Input is a list of lines.
    
    fix_2to3(source, aggressive=True, select=None, ignore=None, filename='', where='global', verbose=False)
        Fix various deprecated code (via lib2to3).
    
    fix_code(source, options=None, encoding=None, apply_config=False)
        Return fixed source code.
        
        "encoding" will be used to decode "source" if it is a byte string.
    
    fix_e265(source, aggressive=False)
        Format block comments.
    
    fix_file(filename, options=None, output=None, apply_config=False)
    
    fix_lines(source_lines, options, filename='')
        Return fixed source code.
    
    fix_multiple_files(filenames, options, output=None)
        Fix list of files.
        
        Optionally fix files recursively.
    
    fix_w602(source, aggressive=True)
        Fix deprecated form of raising exception.
    
    fix_whitespace(line, offset, replacement)
        Replace whitespace at offset and return fixed line.
    
    generate_tokens(text) method of CachedTokenizer instance
        A stand-in for tokenize.generate_tokens().
    
    get_diff_text(old, new, filename)
        Return text of unified diff between old and new.
    
    get_encoding()
        Return preferred encoding.
    
    get_fixed_long_line(target, previous_line, original, indent_word='    ', max_line_length=79, aggressive=False, experimental=False, verbose=False)
        Break up long line and return result.
        
        Do this by generating multiple reformatted candidates and then
        ranking the candidates to heuristically select the best option.
    
    get_index_offset_contents(result, source)
        Return (line_index, column_offset, line_contents).
    
    get_item(items, index, default=None)
    
    get_module_imports_on_top_of_file(source, import_line_index)
        return import or from keyword position
        
        example:
          > 0: import sys
            1: import os
            2:
            3: def function():
    
    get_w605_position(tokens)
        workaround get pointing out position by W605.
    
    global_fixes()
        Yield multiple (code, function) tuples.
    
    has_arithmetic_operator(line)
        Return True if line contains any arithmetic operators.
    
    is_probably_part_of_multiline(line)
        Return True if line is likely part of a multiline string.
        
        When multiline strings are involved, pep8 reports the error as being
        at the start of the multiline string, which doesn't work for us.
    
    is_python_file(filename)
        Return True if filename is Python file.
    
    join_logical_line(logical_line)
        Return single line based on logical line input.
    
    line_shortening_rank(candidate, indent_word, max_line_length, experimental=False)
        Return rank of candidate.
        
        This is for sorting candidates.
    
    longest_line_length(code)
        Return length of longest line.
    
    main(argv=None, apply_config=True)
        Command-line entry.
    
    match_file(filename, exclude)
        Return True if file is okay for modifying/recursing.
    
    multiline_string_lines(source, include_docstrings=False)
        Return line numbers that are within multiline strings.
        
        The line numbers are indexed at 1.
        
        Docstrings are ignored.
    
    mutual_startswith(a, b)
    
    normalize_line_endings(lines, newline)
        Return fixed line endings.
        
        All lines will be modified to use the most common line ending.
    
    normalize_multiline(line)
        Normalize multiline-related code that will cause syntax error.
        
        This is for purposes of checking syntax.
    
    open_with_encoding(filename, mode='r', encoding=None, limit_byte_check=-1)
        Return opened file with a specific encoding.
    
    parse_args(arguments, apply_config=False)
        Parse command-line options.
    
    read_config(args, parser)
        Read both user configuration and local configuration.
    
    readlines_from_file(filename)
        Return contents of file.
    
    refactor(source, fixer_names, ignore=None, filename='')
        Return refactored code using lib2to3.
        
        Skip if ignore string is produced in the refactored code.
    
    refactor_with_2to3(source_text, fixer_names, filename='')
        Use lib2to3 to refactor the source.
        
        Return the refactored source code.
    
    reindent(source, indent_size)
        Reindent all lines.
    
    shorten_comment(line, max_line_length, last_comment=False)
        Return trimmed or split long comment line.
        
        If there are no comments immediately following it, do a text wrap.
        Doing this wrapping on all comments in general would lead to jagged
        comment text.
    
    shorten_line(tokens, source, indentation, indent_word, max_line_length, aggressive=False, experimental=False, previous_line='')
        Separate line at OPERATOR.
        
        Multiple candidates will be yielded.
    
    split_and_strip_non_empty_lines(text)
        Return lines split by newline.
        
        Ignore empty lines.
    
    split_at_offsets(line, offsets)
        Split line at offsets.
        
        Return list of strings.
    
    standard_deviation(numbers)
        Return standard deviation.
    
    supported_fixes()
        Yield pep8 error codes that autopep8 fixes.
        
        Each item we yield is a tuple of the code followed by its
        description.
    
    token_offsets(tokens)
        Yield tokens and offsets.
    
    untokenize_without_newlines(tokens)
        Return source code based on tokens.
    
    wrap_output(output, encoding)
        Return output with specified encoding.

DATA
    BARE_EXCEPT_REGEX = re.compile('except\\s*:')
    CODE_TO_2TO3 = {'E231': ['ws_comma'], 'E721': ['idioms'], 'W601': ['ha...
    COMPARE_NEGATIVE_REGEX = re.compile('\\b(not)\\s+([^][)(}{]+?)\\s+(in|...
    COMPARE_NEGATIVE_REGEX_THROUGH = re.compile('\\b(not\\s+in|is\\s+not)\...
    CONFLICTING_CODES = ('W503', 'W504')
    CR = '\r'
    CRLF = '\r\n'
    DEFAULT_CONFIG = r'C:\Users\liteng\.pep8'
    DEFAULT_IGNORE = 'E226,E24,W50,W690'
    DEFAULT_INDENT_SIZE = 4
    DOCSTRING_START_REGEX = re.compile('^u?r?(?P<kind>["\\\']{3})')
    EXIT_CODE_ERROR = 1
    EXIT_CODE_EXISTS_DIFF = 2
    EXIT_CODE_OK = 0
    LAMBDA_REGEX = re.compile('([\\w.]+)\\s=\\slambda\\s*([\\(\\)=\\w,\\s....
    LF = '\n'
    MAX_PYTHON_FILE_DETECTION_BYTES = 1024
    PROJECT_CONFIG = ('setup.cfg', 'tox.ini', '.pep8', '.flake8')
    PYTHON_SHEBANG_REGEX = re.compile('^#!.*\\bpython[23]?\\b\\s*$')
    SELECTED_GLOBAL_FIXED_METHOD_CODES = ['W602']
    SHORTEN_OPERATOR_GROUPS = frozenset({frozenset({'(', ',', '[', '{'}), ...
    STARTSWITH_DEF_REGEX = re.compile('^(async\\s+def|def)\\s.*\\):')
    absolute_import = _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0...
    division = _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192...
    print_function = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0)...
    unicode_literals = _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', ...

VERSION
    1.4.4

FILE
    c:\users\liteng\appdata\roaming\python\python37\site-packages\autopep8.py


