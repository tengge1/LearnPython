Help on module tabnanny:

NAME
    tabnanny - The Tab Nanny despises ambiguous indentation.  She knows no mercy.

DESCRIPTION
    tabnanny -- Detection of ambiguous indentation
    
    For the time being this module is intended to be called as a script.
    However it is possible to import it into an IDE and use the function
    check() described below.
    
    Warning: The API provided by this module is likely to change in future
    releases; such changes may not be backward compatible.

CLASSES
    builtins.Exception(builtins.BaseException)
        NannyNag
    
    class NannyNag(builtins.Exception)
     |  NannyNag(lineno, msg, line)
     |  
     |  Raised by process_tokens() if detecting an ambiguous indent.
     |  Captured and handled in check().
     |  
     |  Method resolution order:
     |      NannyNag
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, lineno, msg, line)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  get_line(self)
     |  
     |  get_lineno(self)
     |  
     |  get_msg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args

FUNCTIONS
    check(file)
        check(file_or_dir)
        
        If file_or_dir is a directory and not a symbolic link, then recursively
        descend the directory tree named by file_or_dir, checking all .py files
        along the way. If file_or_dir is an ordinary Python source file, it is
        checked for whitespace related problems. The diagnostic messages are
        written to standard output using the print statement.
    
    process_tokens(tokens)

DATA
    __all__ = ['check', 'NannyNag', 'process_tokens']

VERSION
    6

FILE
    c:\program files\python37\lib\tabnanny.py


